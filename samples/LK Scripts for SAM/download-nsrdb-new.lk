/////////////////////////////////////////////////////////////////////////////////
//
// This script reads a list of location names or lat/lon pairs from a text
// file and downloads weather files from the NSRDB PSM V3 or SUNY International
// datasets.
//
// The text file should be formatted as follows:
//
//	 lat, lon, dataset
//	 39.7444, -105.152, tmy
//	 38.8977, -77.0365, 2013
//   ...
//
//	 address, dataset
//	 15013 Denver W Pkwy Golden CO, tmy
//	 Washington DC, 2013
//   ...
//
//	 lat, lon, address, dataset
//	 39.7444, -105.152, 15013 Denver W Pkwy Golden CO, tmy
//	 38.8977, -77.0365, Washington DC, 2013
//   ...
//
// It provides the option to download a single TMY file or a set of single-year
// files for P50/P90 analysis.
//
// This script replicates the weather file download function on SAM's Location
// and Resource page.
//
// The script was written in SAM 2018.11.11.
//
////////////////////////////////////////////////////////////////////////////////

//@ name=location_file;type=filename;label=Location file:;value=;
//@ name=location_output;type=folder;label=Output folder:;value=;
//@ name=Location_mode;type=combo;label=Location mode:;value=Latitude and Longitude,Address;sel=0;
//@ name=interval;type=combo;label=Desired interval (minutes):;value=30,60;sel=1;

location_file = choose_file( cwd(), 'Choose Input Data File', 'Text Files (*.*}|*.*');
location_output = choose_dir( cwd(), 'Choose Folder for Output');
location_mode = choose_from_list(['Latitude and Longitude','Address'],'Choose input mode:','Choose Input Mode',0);
interval = choose_from_list([60,30],'Choose time step in minutes:','Choose Time Step',0);
function get_nsrdb( lat, lon, dataset, location_output, interval)
{
	valid = to_real(lat) >= -90 && to_real(lat) <= 90 && to_real(lon) >= -180 && to_real(lon) <= 180;
	if ( !valid )
	{
		return 'Latitude = ' + lat + 'or longitude = ' + ' is not valid!';
	}	
/*		
	url = webapi( 'nsrdb_download' );
	url = replace(url, '<LON>', lon );
	url = replace(url, '<LAT>', lat );
	url = replace(url, '<DATASET>', dataset );
	url = replace(url, '<INTERVAL>', interval);
*/

////////////////////////////////////////////////////////////////////////////////

	// get list of available NSRDB datasets for the location
	url = webapi( 'nsrdb_query' );
	outln( url );
	url = replace( url, '<LAT>', lat );
	url = replace( url, '<LON>', lon );
	json_str = curl( url );
	var = json_read( json_str );
	if ( typeof( var ) == 'table' )
	{
		if ( var.errors != [] )
		{
			outln(var.errors);
			if ( strpos( lower(var.errors.code), 'api' ) > -1 ) // no or invalid api key
				outln('See private.h to set API keys.');
		}
		elseif ( var.outputs == null )
		{
			outln('No NSRDB data available for \"' + location + '\".');
		}	
		elseif ( var.outputs == [] )
			outln('No NSRDB data available for \"' + location + '\".');
		else
			json_ok = true;
	}
	else
	{
		outln('NSRDB did not return valid JSON string:');
		outln(json_str);
		if ( strpos( lower(json_str), 'api' ) > -1 ) // no or invalid api key
			outln('See private.h to set API keys.');
	}
	if ( json_ok )
	{
		arr = var.outputs;
		for ( i=0; i<#arr; i++ )
		{
			name = arr[i].name;
			if ( name == 'suny-international' || name == 'psmv3' )
				{ best_dataset = i; }
		}
		// PSM V3 is var.outputs[1]
		// SUNY International is var.outputs[0]
		name = var.outputs[best_dataset].name;
		url = split(var.outputs[best_dataset].links[0].link,'?')[0];
		years = var.outputs[best_dataset].availableYears;
		outln('URL for NSRDB query: ' + url);
	}

////////////////////////////////////////////////////////////////////////////////

	
	// Download file (try a few times in case server is busy)
	attempt = 0;
	
	wfname = to_string(lat) + '_' + to_string(lon) + '_' + to_string(name) + '.csv';
	wf = location_output + '/' + wfname ;
	
	while (!file_exists(wf) && attempt < 3)
	{
		if ( !file_exists(wf) ){
			if ( !curl( url, { 'file'=wf }) )
				outln('NSRDB download error');
		}
		else {
			outln('File already downloaded, skipping');
		}
		
		// run wfcheck module to see if there are any data problems with the file
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
		
		if ( typeof(result) == 'string' )
		{
			obj = json_file(wf );	
			outln('Error in downloaded weather file data for ' 
				+ wfname + ':\n\t' 
				+ ( (typeof(obj)=='table' && obj ?@ 'errors') ? obj.errors[0] : result ) );
			remove_file( wf );
		}
		
		attempt++;
	}
	// Report error message if tried to download and failed
	if (attempt == 3 && !file_exists(wf)){
		outln('Attempt to download ' + wfname + ' failed!\n');
	}
}	

function text_to_table( file_in )
{
	f_text = read_text_file( file_in );
	f_lines = split(f_text,'\n');
	keys = split(f_lines[0],',');
	for (i=1;i<#f_lines;i++)
	{
		arr = split(f_lines[i],',');
		ii=i-1;
		for (k=0;k<#keys;k++)
		{
			T{keys[k]}[ii] = arr[k];
		}
	}
	return T;
}

function main()
{

	location_file = to_string(macro.location_file); 
	location_output = to_string(macro.location_output);
	interval = to_string(macro.interval);
	location_mode = to_string(macro.location_mode);
	
	if ( location_file == '' || location_output == '' )
	{
		outln( 'Please choose both a location file and an output folder!');
		exit;
	}
		
	outln('Location file: ' + location_file);
	outln('Output folder: ' + location_output);
	outln('');
	locations = text_to_table(location_file);
	n_records = 0;
	if (!strcmp(location_mode, 'Address') > -1 )
	{
		n_records = #locations.address;
	} else 
	{
		n_records = #locations.lat;
	}

	//For each site in lookup file
	for ( j=0; j<n_records; j++ )
	{
		lat = 0; 
		lon = 0;
		
		// Geocode
		if (!strcmp(location_mode, 'Address') > -1)
		{
			latlon = geocode(locations.address[j]);
			lat = latlon.lat;
			lon = latlon.lon;
		}
		else 
		{
			lat = locations.lat[j];
			lon = locations.lon[j];
		}
		dataset = locations.dataset[j];
		
		// status message
		outln('Getting weather file ' + to_string(j+1) + ' of ' + to_string(n_records) + ' for ' + to_string(lat) + ', ' + to_string(lon) + ', ' + to_string(dataset));
		
		if (stricmp(to_string(dataset), 'tmy') != 0)
		{
			year = to_int(dataset);
			if (year < 1998)
			{
				outln('Year selected was ' + to_string(year) + ' but NSRDB only goes back to 1998, setting year to 1998');
				year = 1998;
			} 
			elseif (year > 2016) {
				outln('Year selected was ' + to_string(year) + 'but NSRDB only goes to 2016, setting year to 2016');
				year = 2016;
			}
			dataset = year;
		}
		
		// Download weather file
		get_nsrdb( lat, lon, to_string(dataset), location_output, interval );
		millisleep(1000);
	}
	outln('');
}

main();
