/*////////////////////////////////////////////////////////////////////////////////

Given a latitude and longitude for a location in the NREL National Solar 
Radiation Database (NSRDB), this script generates a CSV file with download URLs
for all files in all available datasets, and downloads files from the datasets
you specify.

Instructions:
 
 1. Assign values to email and key using information from your NREL Developer
    Network account. Sign up at https://developer.nrel.gov/.

 2. Assign values to lat and lon for your location. (You can modify this 
    script to use the geocode() function to convert a place name or street 
    address to lat/lon pair.)
 
 3. Assign values to year, interval, and version according to the notes in the 
    comments below. For example, to download all 
    years from the PSM V3 dataset with 30-minute timesteps
    year = 'all'
    interval = 30
    version = 'psmv3'

Note: The NSRDB may return a file with an error message instead of weather data
if you exceed the the download rate limit or if there is a problem with the URL.

Written in SAM 2018.11.11, December 2018

//////////////////////////////////////////////////////////////////////////////*/

// NREL Developer Network credentials. Sign up at https://developer.nrel.gov/
email = '';
key = '';

//email = '';
//key = '';

// folder to store weather files (script creates subfolder for each location).
path = homedir() + '/nsrdb_download/';

// sample locations
us_lat = 45;
us_lon = -119;

asia_lat = 91.287;
asia_lon = 23.832;

// location for download
lat = us_lat;
lon = us_lon;

// nsrdb query to determine what data is available for location
// https://developer.nrel.gov/docs/solar/nsrdb/nsrdb_data_query/
// var.outputs: array of tables for each dataset available for the location [{psm dataset},{psmv3 dataset},{mts1 dataset}...]
// var.outputs[x].availableYears: array ["tmy",2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014]
// var.outputs[x].availableIntervals: array [30,60]
// var.outputs[x].links: array of tables [{year,interval,link},{year,interval,link},...]
// var.outputs[x].name: string version name 'suny-international','psmv3','mts1','mts2'

base_url = 'http://developer.nrel.gov/api/solar/';
query_url = 'nsrdb_data_query.json?api_key=' + key + '&wkt=POINT(' + to_string(lon) + '+' + to_string(lat) + ')';
url = base_url + query_url;

json_str = curl( url );
var = json_read( json_str );
outln(var.error);
if ( var.error != null )
{
	msgbox( 'NSRDB Error!\n' + var.error.message + '\n\nExiting script.' );
	exit;
}

// get list of available versions 
if ( #var.outputs > 0 )
{
	for( i=0; i<#var.outputs; i++ )
	{
		availableVersions[i] = var.outputs[i].name;
	}
}

outln( 'Available versions = ' + availableVersions );

// get download urls for all available versions, intervals, and years, create
// file names for downloads
n = 0;
for( x=0; x<#availableVersions; x++ )
{
	outln( availableVersions[x] + ':' );
	outln( '  years = ' + var.outputs[x].availableYears );
	outln( '  intervals = ' + var.outputs[x].availableIntervals );
	for( i=0; i<#var.outputs[x].links; i++ )
	{
		wf.version[n] = var.outputs[x].name;
		wf.interval[n] = var.outputs[x].links[i].interval;
		wf.year[n] = var.outputs[x].links[i].year;
		link = var.outputs[x].links[i].link;
		link = replace( link, 'yourapikey', key );
		link = replace( link, 'youremail', email );
		wf.url[n] = link;
		wf.fname[n] = path + 'nsrdb_' + var.outputs[x].name + '_' + lat + '_' + lon + '_' + var.outputs[x].links[i].interval + 'min_' + var.outputs[x].links[i].year + '.csv';
		n++;
	}
}

outln( 'Number of available files = ' + #wf.url );

// write list of URLs for all available files to CSV
mkdir( path , { 'make_full' = true });
fname = path + 'nsrdb_urls_' + lat + '_' + lon + '.csv';
ok = csvwrite( fname, wf );
if ( !ok ) { outln( 'Failed to write file list to CSV.' ); }
else { outln( 'List of URLs written to ' + fname + '.\n'); }

year = '2014'; // 'tmy' or year '2009', '2017', etc. as string. 'all' to download all years
interval = 60; // 30 or 60 minutes as number (only 60-minute data available for tmy)
version = 'psmv3'; // string
// 'psmv3' (PSM V3)
// 'mts1' (1961-1990 update aka TMY2)
// 'mts2' (1991-2005 update aka TMY3 )
// 'mts3' (1991-2010 update aka TMY3 )
// 'psm' (PSM V2 discontinued Dec 31 2018)
// 'suny-international' (SUNY data for India, Bangladesh, Bhutan, Nepal, Sri Lanka, and parts of Pakistan and Afghanistan)
// see https://nsrdb.nrel.gov/current-version for U.S. data
// and https://nsrdb.nrel.gov/international-datasets for international data

// download test file to get server error message from test file
ok = curl( wf.url[0], {'file' = wf.fname[0] } );
if ( !ok ) { outln( 'Test download failed.' ); }
else
{
	arr = csvread( wf.fname[0] );
	if ( #arr < 10 )
	{
		msgbox( 'Download Error!\n' + 'Message from NSRDB server: \n\n' +  arr + '\n\nExiting script.' ); 
		remove_file( wf.fname[0] );
		exit;
	}
	else { remove_file( wf.fname[0] ); }
}

// download requested files
n=0;
for( i=0; i<#wf.url; i++ )
{
	if ( wf.version[i] == version && wf.interval[i] == interval )
	{
		if ( strpos( to_string(wf.year[i]), to_string(year) ) > -1 || to_string(year) == 'all' ) // mts1 uses 'tmy2' instead of 'tmy'.
		{
			outln( 'Downloading data to ' + wf.fname[i] );
			outln( wf.url[i] );
			outln();
			ok = curl( wf.url[i], {'file' = wf.fname[i] } );
			if ( !ok ) { outln( '  Download failed.' ); }
			else { n++; }
		}	
	}
}
if ( n == 0 )
{ outln( 'No files donwloaded. Check that year, interval, and version values are valid.' ); }
else { outln( 'Downloaded ' + n + ' file(s).' ); }
outln( 'Done.' );
browse( path );