/*////////////////////////////////////////////////////////////////////////////////

Given a location name, street address, or latitude and longitude for a location 
in the NREL National Solar Radiation Database (NSRDB), this script prompts
you to select the data file(s) you want to download.

The script will also read a list of locations from a CSV file with either of
a list of addresses and location names, or of latitude and longitudes.

CSV format for list of addresses and/or location names. Addresses and place names
containing commas should be enclosed in double quotes ("):

address
lebanon or
paducah ky
"alexandia, va"
"111 Rainbow St, Clarksville TN"

CSV format for list of latitudes and longitudes:

lat,lon
45,-112
40,-90
34,-110
33.4,-109.6

This script replicates the functionality of the download button on the Location 
and Resource page.

Click Run above to start the script.
 
Note: The NSRDB may return a file with an error message instead of weather data
if you exceed the the download rate limit or if there is a problem with the URL.

Tested in SAM 2020.2.29 r2

//////////////////////////////////////////////////////////////////////////////*/

// folder to store weather files (script creates subfolder for each location).

path = '';
path = choose_dir(wfdownloaddir(), 'Choose a Folder to Store Downloaded Files');
if ( path == '' ) 
{
	outln( 'You must choose a folder to store downloaded files. Exiting script.' );
	exit;
}

location_option = '';
options = ['Download file for single location','Import list of locations from CSV file'];
location_option = choose_from_list( options ,'Choose one:','Single or Multiple Location',0);
if ( location_option == '' )
{
	outln( 'You must choose a location option. Exiting script.' );
	exit;
}


site = {};
site.lat = []; 
site.lon = [];
site.name = [];

if ( location_option == options[0] )
{
	location = in( 'Enter a location name, street address, or lat,lon pair:','40.1,-109.3','Location Information');
	lat_lon = geocode( location );
	if ( lat_lon.ok == false )
	{
		outln( 'Failed to convert location to latitude and longitude!\n\t' + location + '\n\tExiting script.');
		exit;
	}
	else
	{
		site.lat[0] = lat_lon.lat;
		site.lon[0] = lat_lon.lon;
		addr = lower(location);
		if ( isdigit(split(addr,',')[0]) )
		{
			addr = replace(location,',','_');
		}
		else
		{
			addr = replace(addr,',','-');
			addr = replace(addr,'.','-');
			addr = replace(addr,' ','-');
			addr = replace(addr,'--','-');
		}
		site.name[0] = addr;
	}
}
else
{
	location_file = choose_file( cwd(), 'Choose Location File', 'CSV files (*.csv)|*.csv');
	locations = csvread(location_file,{'table'=true});
	keys = @locations;
	n_records = 0;
	if ( ( keys ?@ 'address' ) > -1 )
	{
		n_records = #locations.address;
		is_address = true;
	} 
	elseif ( ( keys ?@ 'lat' ) > -1 )
	{
		n_records = #locations.lat;
		is_address = false;
	}
	else
	{
		outln( 'CSV file must have first row "address" or "lat,lon"!\n\t' + keys + '\n\tExiting script.' );
		exit;
	}
	//For each site in lookup file
	for ( j=0; j<n_records; j++ )
	{
		// Geocode
		if ( is_address )
		{
			latlon = geocode(locations.address[j]);
			site.lat[j] = latlon.lat;
			site.lon[j] = latlon.lon;
			addr = lower(locations.address[j]);
			addr = replace(addr,',','-');
			addr = replace(addr,'.','-');
			addr = replace(addr,' ','-');
			addr = replace(addr,'--','-');
			site.name[j] = addr;
		}
		else 
		{
			site.lat[j] = locations.lat[j];
			site.lon[j] = locations.lon[j];
			site.name[j] = to_string(locations.lat[j]) + '_' + to_string(locations.lon[j]);
		}
	}	
}

outln( site );
// nsrdb query to determine what data is available for location
// https://developer.nrel.gov/docs/solar/nsrdb/nsrdb_data_query/
// var.outputs: array of tables for each dataset available for the location [{psm dataset},{psmv3 dataset},{mts1 dataset}...]
// var.outputs[x].availableYears: array ["tmy",2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014]
// var.outputs[x].availableIntervals: array [30,60]
// var.outputs[x].links: array of tables [{year,interval,link},{year,interval,link},...]
// var.outputs[x].name: string version name 'suny-international','psmv3','mts1','mts2'

wf = {};
n = 0;
for ( s=0 ; s<#site.lat; s++ )
{
	// on first pass, get list of available versions and urls
	if ( s == 0 )
	{
		base_url = 'http://developer.nrel.gov/api/solar/';
		query_url = 'nsrdb_data_query.json?api_key=<SAMAPIKEY>&wkt=POINT(' + to_string(site.lon[s]) + '+' + to_string(site.lat[s]) + ')';
		url = base_url + query_url;
		json_str = curl( url );
		var = json_read( json_str );
		if ( #var.errors > 0 )
		{
			outln( 'NSRDB Error!\n\t' + var.errors[0] + '\n\tFor location name ' + site.name[s] + '.\n\tExiting script.' );
			exit;
		}
		if (#var.outputs == 0)
		{
			outln( 'No NSRDB data found for location name ' + site.name[s] + '.\n\tNSRDB grid cell coordinates: Latitude = ' + site.lat[s] + ', Longitude = ' + site.lon[s] + '.\n\tExiting script.' );
			exit;
		}
		for( i=0; i<#var.outputs; i++ )
		{
			available_versions[i] = var.outputs[i].name;
		}
		version = choose_from_list( available_versions, 'Choose an NSRDB version (Current version for Americas is psmv3:','Choose NSRDB Version' );
		for( i=0; i<#var.outputs; i++ )
		{
			if ( var.outputs[i].name == version )
			{
				links = var.outputs[i].links;
				available_years = var.outputs[i].availableYears;
				available_intervals = var.outputs[i].availableIntervals;
			}
		}
		years = available_years; // contains mix of numbers 2001, 2002, etc. and strings tmy, all
		if ( #years > 1 )
		{
			years_new = alloc( #years+1 );
			years_new[0] = 'all';
			for ( i=1; i<#years_new; i++ )
			{
				years_new[i] = years[i-1];
			}
			years = years_new;
		}
		year = '';	
		year = choose_from_list( years, 'Choose a year (Choose "all" to download all years for P50/P90 simulations):  ','Choose Year' );
		if ( year == '' )
		{
			outln( 'You must choose a year. Exiting script.' );
			exit;
		}
		if ( ( year != 'all' ) && ( strpos( year, 'tmy' ) < 0 ) ) // mts1 versions uses 'tmy2' instead of 'tmy'
		{
			year = to_int( year );
		}
		if ( strpos( year, 'tmy' ) > -1 ) // only hourly data available for tmy
		{
			interval = 60;
		}
		else
		{
			interval = choose_from_list( available_intervals, 'Choose a the interval (time step) in minutes:  ','Choose Interval' );
			interval = to_int( interval );
		}	
	}
	// get download urls for all available versions, intervals, and years, create
	// file names for downloads
	for( i=0; i<#links; i++ )
	{
		if ( year == 'all' )
		{
			for ( j=0; j<#years; j++ )
			{
				if ( years[j] != 'all' )
				{
					if ( (links[i].year == years[j]) && (links[i].interval == interval) )
					{
						if ( years[j] == 'tmy' ) { intvl = 60; }
						else { intvl = interval; }
						url = links[i].link;
						url = replace( url, 'yourapikey', '<SAMAPIKEY>' );
						url = replace( url, 'youremail', '' );
						wf.url[n] = url;
						wf.fname[n] = path + '/nsrdb_' + site.name[s] + '_' + site.lat[s] + '_' + site.lon[s] + '_' + intvl + 'min_' + years[j] + '.csv';
						n++;
					}
				}	
			}	
		}
		elseif ( (links[i].year == year) && (links[i].interval == interval) )
		{
			url = links[i].link;
			url = replace( url, 'yourapikey', '<SAMAPIKEY>' );
			url = replace( url, 'youremail', '' );
			wf.url[n] = url;
			wf.fname[n] = path + '/nsrdb_' + site.name[s] + '_' + site.lat[s] + '_' + site.lon[s] + '_' + interval + 'min_' + year + '.csv';
			n++;
		}
	}
}

// download test file to get server error message from test file
out( 'Testing NSRDB connection...');
ok = curl( wf.url[0], {'file' = wf.fname[0] } );
if ( !ok ) { outln( 'test failed. NSRDB server could be down.' ); }
else
{
	arr = csvread( wf.fname[0] );
	if ( #arr < 10 )
	{
		outln( '\nDownload Error!\n' + 'Message from NSRDB server: \n\t' +  arr + '\nExiting script.' ); 
		remove_file( wf.fname[0] );
		exit;
	}
	else 
	{
		outln( 'test OK.');
		remove_file( wf.fname[0] ); 
	}
}

// download requested files
n=0;
outln( '\nDownloading ' + #wf.url + ' files...' );
outln();
for( i=0; i<#wf.url; i++ )
{
		outln( 'File ' + to_string(i+1) +  ' of ' + #wf.url + ':\n\t' + wf.fname[i] );
		outln( 'URL:\n\t' + wf.url[i] );
		ok = curl( wf.url[i], {'file' = wf.fname[i] } );
		if ( !ok ) 
		{
			outln( '\tDownload failed.' ); 
		}
		else 
		{
			outln( '\tDownload succeeded.' );
			n++; 
		}
		outln();
}

outln( 'Done.' );
browse( path );
