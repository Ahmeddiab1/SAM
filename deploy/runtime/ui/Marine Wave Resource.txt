Marine Wave Resource
1301
1897
49
Hyperlink

1
9
Name
5
10
Hyperlink2
X
3
27
Y
3
468
Width
3
847
Height
3
21
Tool Tip
5
0
Caption
5
121
For locations not covered by the NSRDB, click here to go to the SAM website Weather Page for links to other data sources.
URL
5
33
https://sam.nrel.gov/weather-data
TabOrder
3
0
Numeric

1
17
Name
5
13
annual_albedo
X
3
669
Y
3
837
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_beam
X
3
201
Y
3
822
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
14
annual_diffuse
X
3
201
Y
3
849
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
13
annual_global
X
3
201
Y
3
795
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_snow
X
3
669
Y
3
810
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_tdry
X
3
201
Y
3
876
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_wspd
X
3
201
Y
3
903
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
8
Name
5
14
btnScanLibrary
X
3
789
Y
3
27
Width
3
150
Height
3
24
Tool Tip
5
0
Caption
5
15
Refresh Library
TabOrder
3
4294967295
Button

1
8
Name
5
23
btn_add_file_to_library
X
3
720
Y
3
540
Width
3
153
Height
3
24
Tool Tip
5
0
Caption
5
19
Add file to library
TabOrder
3
11
Button

1
8
Name
5
13
btn_view_data
X
3
720
Y
3
582
Width
3
153
Height
3
24
Tool Tip
5
0
Caption
5
12
View data...
TabOrder
3
12
Label

1
13
Name
5
13
caption_techs
X
3
573
Y
3
639
Width
3
406
Height
3
63
Tool Tip
5
0
Caption
5
0
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
TextEntry

1
11
Name
5
11
data_source
X
3
462
Y
3
669
Width
3
103
Height
3
24
Tool Tip
5
0
Text
5
3
src
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
13
Name
5
24
download_weather_caption
X
3
24
Y
3
360
Width
3
846
Height
3
37
Tool Tip
5
0
Caption
5
342
The High Resolution Ocean Surface Wave Hindcast is a database with 30  years of 3-hour resolution wave data that you can download and add to your wave resource library.  Download the joint probability distribution (JPD) file based on a specified year, a specified subset of a year, or the entire multi-year dataset for a particular location. 
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
TextEntry

1
11
Name
5
9
file_name
X
3
279
Y
3
312
Width
3
960
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
13
frequency_sum
X
3
1017
Y
3
1518
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
GroupBox

1
8
Name
5
13
group_library
X
3
6
Y
3
9
Width
3
1276
Height
3
1675
Tool Tip
5
0
Caption
5
28
Wave Energy Resource Library
Bold
2
1
Divider

1
10
Name
5
14
group_optional
X
3
468
Y
3
789
Width
3
363
Height
3
19
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
13
Optional Data
Bold
2
1
GroupBox

1
8
Name
5
17
group_wave_matrix
X
3
15
Y
3
1029
Width
3
1252
Height
3
524
Tool Tip
5
0
Caption
5
57
Annual Frequency of Occurrence of Sea States from Library
Bold
2
1
TextEntry

1
11
Name
5
11
in_location
X
3
30
Y
3
441
Width
3
438
Height
3
24
Tool Tip
5
0
Text
5
77
Type the latitude and longitude of the desired wave energy converter location
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
RadioChoice

1
11
Name
5
13
in_time_frame
X
3
336
Y
3
402
Width
3
403
Height
3
24
Tool Tip
5
0
Selection
3
0
Items
6
3
Whole year
Specified range
Entire dataset
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
8
Label

1
13
Name
5
13
label_library
X
3
15
Y
3
30
Width
3
764
Height
3
21
Tool Tip
5
0
Caption
5
128
Click a name in the list to choose a file from the library. Type a few letters of the name in the search box to filter the list.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
3
lat
X
3
111
Y
3
642
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
1.1
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
10
Library

1
8
Name
5
8
location
X
3
15
Y
3
54
Width
3
1223
Height
3
243
Tool Tip
5
0
Library
5
16
WaveResourceData
Fields
5
127
Name,City,State,Country,Latitude,Longitude,Nearby Buoy Number,Average Power Flux,Bathymetry,Sea Bed,Time Zone,Data Source,Notes
Numeric

1
17
Name
5
3
lon
X
3
111
Y
3
669
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
1.2
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
11
Numeric

1
17
Name
5
13
max_frequency
X
3
198
Y
3
1518
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Numeric

1
17
Name
5
16
max_frequency_Hs
X
3
459
Y
3
1518
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Numeric

1
17
Name
5
16
max_frequency_Te
X
3
774
Y
3
1518
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
10
TextEntry

1
11
Name
5
18
nearby_buoy_number
X
3
462
Y
3
642
Width
3
103
Height
3
24
Tool Tip
5
0
Text
5
4
wban
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Divider

1
10
Name
5
9
object 22
X
3
21
Y
3
774
Width
3
849
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
50
Annual Averages Calculated from Weather File  Data
Bold
2
1
Divider

1
10
Name
5
11
object 2236
X
3
30
Y
3
618
Width
3
840
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
29
Header Data from Weather File
Bold
2
1
GroupBox

1
8
Name
5
8
object 4
X
3
12
Y
3
345
Width
3
1270
Height
3
162
Tool Tip
5
0
Caption
5
22
Download Weather Files
Bold
2
1
GroupBox

1
8
Name
5
10
object 418
X
3
15
Y
3
1563
Width
3
1248
Height
3
96
Tool Tip
5
0
Caption
5
25
Wave Energy Resource File
Bold
2
1
GroupBox

1
8
Name
5
10
object 423
X
3
12
Y
3
516
Width
3
1271
Height
3
432
Tool Tip
5
0
Caption
5
21
Wave Data Information
Bold
2
1
Label

1
13
Name
5
8
object 7
X
3
258
Y
3
708
Width
3
615
Height
3
60
Tool Tip
5
0
Caption
5
233
For NSRDB data, the latitude and longitude shown here from the weather file header are the coordinates of the NSRDB grid cell and may be different from the values in the file name, which are the coordinates of the requested location.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
10
object 718
X
3
753
Y
3
1584
Width
3
496
Height
3
68
Tool Tip
5
0
Caption
5
251
Check the box and click Browse to choose a .csv file stored on your computer without adding it to the wave resource library. Note that the matrix data above shows data from files in the library, not from the file you choose here. See Help for details.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
10
object 735
X
3
396
Y
3
903
Width
3
222
Height
3
24
Tool Tip
5
0
Caption
5
28
*NaN indicates missing data.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
1
AlignTop
2
0
Numeric

1
17
Name
5
7
sea_bed
X
3
111
Y
3
723
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
317
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Button

1
8
Name
5
14
select_wf_wave
X
3
654
Y
3
1614
Width
3
90
Height
3
24
Tool Tip
5
0
Caption
5
9
Browse...
TabOrder
3
4294967295
Label

1
13
Name
5
15
summary_caption
X
3
21
Y
3
540
Width
3
690
Height
3
36
Tool Tip
5
0
Caption
5
0
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
2
tz
X
3
111
Y
3
696
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
-7.5
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
4
GMT 
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
8
CheckBox

1
9
Name
5
20
use_specific_wf_wave
X
3
24
Y
3
1584
Width
3
501
Height
3
27
Tool Tip
5
0
Caption
5
65
Choose wave energy resource file instead of choosing from library
State
2
0
TabOrder
3
4294967295
TextEntry

1
11
Name
5
22
user_specified_wf_wave
X
3
321
Y
3
591
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
24
user_specified_wf_wave18
X
3
24
Y
3
1614
Width
3
624
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
19
wave_data_file_name
X
3
321
Y
3
591
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
24
wave_data_file_name_load
X
3
321
Y
3
591
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
8
Name
5
13
wave_download
X
3
618
Y
3
441
Width
3
234
Height
3
24
Tool Tip
5
0
Caption
5
30
Download and add to library...
TabOrder
3
10
TextEntry

1
11
Name
5
18
wave_resource_file
X
3
105
Y
3
591
Width
3
604
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
0
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
DataMatrix

1
27
Name
5
20
wave_resource_matrix
X
3
36
Y
3
1047
Width
3
1200
Height
3
464
Tool Tip
5
0
PasteAppendRows
2
0
PasteAppendCols
2
0
ShowButtons
2
0
ShowRows
2
0
ShowRowLabels
2
0
RowLabels
5
0
ShadeR0C0
2
1
VerticalLabel
5
32
Hs = significant wave height (m)
HorizontalLabel
5
27
Te = wave energy period (s)
ShadeC0
2
0
ShowCols
2
0
ShowColLabels
2
0
ColLabels
5
0
NumRowsLabel
5
5
Rows:
NumColsLabel
5
5
Cols:
Layout
3
1
ChoiceColumn
3
4294967295
Choices
5
15
Choice1,Choice2
HideColumn
3
4294967295
ShowColumn
3
4294967295
ColorMap
2
1

33
average_power_flux
3
1
Average power flux
kW/m
ME Wave Resource
0
8
1
1
1
1
0
Numeric
bathymetry
3
4
Bathymetry
 
ME Wave Resource
0
8
1
4
0
TextEntry
city
3
4
City
 
ME Wave Resource
0
8
1
4
0
TextEntry
country
3
4
Country
 
ME Wave Resource
0
8
1
4
0
TextEntry
data_source
3
4
Data source
 
ME Wave Resource
0
8
1
4
0
TextEntry
file_name
3
4
Wave resource file name from library
 
ME Wave Resource
0
8
1
4
0
TextEntry
frequency_sum
3
1
Frequency sum
%
ME Wave Resource
0
8
1
1
1
1
0
Numeric
in_location
3
0
 
 
 
0
0
1
0
Default
in_time_frame
3
0
 
 
 
0
0
1
0
Default
lat
3
1
Latitude
degrees
ME Wave Resource
0
8
1
1
1
1
0
Numeric
library_folder_list
3
4
 
 
 
0
0
1
4
9
<invalid>
MultilineText
location
3
4
Wave resource location
 
ME Wave Resource
18
WaveResourceData|0
19
1
4
27
CalWave Central Coast South
Library
lon
3
1
Longitude
degrees 
ME Wave Resource
0
8
1
1
1
1
0
Numeric
max_frequency
3
1
Probability of dominant wave
 
ME Wave Resource
0
8
1
1
1
1
0
Numeric
max_frequency_Hs
3
1
Dominant wave height
m
ME Wave Resource
0
8
1
1
1
1
0
Numeric
max_frequency_Te
3
1
Dominant wave period
s
ME Wave Resource
0
8
1
1
1
1
0
Numeric
name
3
4
Name
 
ME Wave Resource
0
8
1
4
0
TextEntry
nearby_buoy_number
3
4
Nearby buoy number
 
ME Wave Resource
0
8
1
4
0
TextEntry
notes
3
4
Notes
 
ME Wave Resource
0
8
1
4
9
<invalid>
TextEntry
sea_bed
3
4
Sea bed
 
ME Wave Resource
0
8
1
4
0
TextEntry
state
3
4
State
 
ME Wave Resource
0
8
1
4
0
TextEntry
tz
3
1
Time zone
 
ME Wave Resource
0
8
1
1
1
1
0
Numeric
use_specific_wave_file
3
0
 
 
 
0
0
1
0
 
use_specific_wf_wave
3
1
Wind resource enable user-specified file
 
ME Wave Resource
0
5
1
1
1
1
0
CheckBox
user_specified_wave_file
3
0
 
 
 
0
0
1
0
Default
user_specified_wf_wave
3
4
Wave resource user-specified file name
 
ME Wave Resource
0
1
1
4
1
 
Default
wave_data_file_name
3
4
 
 
 
0
0
1
4
9
<invalid>
Default
wave_data_file_name_load
3
4
 
 
 
0
0
1
4
9
<invalid>
Default
wave_download
3
0
 
 
 
0
0
1
0
Default
wave_library_folder_list
3
0
 
 
 
0
0
1
0
Default
wave_resource_file
3
0
Wave file
 
Location and Resource
0
8
1
0
Default
wave_resource_filename
3
4
Wave resource file name
 
ME Wave Resource
0
9
1
4
0
Default
wave_resource_matrix
3
3
Wave resource matrix
 
ME Wave Resource
0
3
1
3
1
1
0
DataMatrix

821
equations{'wave_resource_filename'} = define() {
	if ( ${use_specific_wf_wave} ) return ${user_specified_wf_wave};
	else return ${file_name};
};

equations{'wave_resource_file'} = define() {
	return ${wave_resource_filename};
};

equations{ '$MIMO$ mhk_wave_resource_freq' } = define () {
	mat = ${wave_resource_matrix};
	
	max_Hs = 0;
	max_Te = 0;
	max_freq = 0;
	for (r=1;r<#mat; r++)
		for (c=1; c<#mat[0];c++)
			if (mat[r][c] > max_freq)
			{
				max_freq =mat[r][c];
				max_Hs = mat[r][0];
				max_Te = mat[0][c];
			}
	${max_frequency} = max_freq;
	${max_frequency_Hs} = max_Hs;
	${max_frequency_Te} = max_Te;
	
	return 0;
};


equations{ 'frequency_sum' } = define () 
{
	mat = ${wave_resource_matrix};
	sum_mat = 0;
	for (r=1;r<#mat; r++)
		for (c=1; c<#mat[0];c++)
			sum_mat += mat[r][c];
	return sum_mat;
};

29264
function enable_disable_library() {
	enable_library = !value('use_specific_wf_wave');
	enable('wave_resource_matrix',false);
	property('wave_resource_matrix','ColorMap',enable_library);
	enable('location',enable_library);
	enable('btnScanLibrary',enable_library);
	enable('average_power_flux',enable_library);
	enable('bathymetry',enable_library);
	enable('city',enable_library);
	enable('country',enable_library);
	enable('data_source',enable_library);
	enable('file_name',enable_library);
	enable('frequency_sum',enable_library);
	enable('lat',enable_library);
	enable('location',enable_library);
	enable('lon',enable_library);
	enable('max_frequency',enable_library);
	enable('max_frequency_Hs',enable_library);
	enable('max_frequency_Te',enable_library);
	enable('name',enable_library);
	enable('nearby_buoy_number',enable_library);
	enable('notes',enable_library);
	enable('sea_bed',enable_library);
	enable('state',enable_library);
	enable('tz',enable_library);
	
}

on_change{'btnScanLibrary'} = define() {
	rescanlibrary('wave');

};

on_change{'btn_add_remove_folders'} = define() {
	update_library_folders('');
};

on_change{'btn_refresh_library'} = define() {
	update_library_folders('');
	update_info('on_change btn_refesh_library');
};

on_load{'Marine Wave Resource'} = define() {
	enable("wave_resource_matrix",false);
	on_change{'use_specific_wf_wave'}();
	enable_disable_library();
	//show('use_specific_wave_file', false); // determines whether user_specified_weather_file is used instead of solar_data_file_name
	//show('user_specified_wave_file', false); // requires use_specific_weather_file = 1, set by LK script
	value('wave_data_file_name_load', value('wave_data_file_name'));
	show('wave_data_file_name_load', false); // stores weather file name when UI form loaded
	show('wave_data_file_name', false); 
	//show('in_time_frame', value('in_wave_options') != 0 ); //No option for TMY data on first iteraiton
	
	refresh();
	update_library_folders( '' );
	update_info( 'on_load Wave Resource Data');
};

on_change{'location'} = define() {
	file = ${file_name};
	value("name",value("location"));
	
	if (!file_exists(file))
	{
		rescanlibrary( 'wave' );
		refresh('location');
		return;
	}
	file = replace(file, '\\', '/');
	fn = open(file,'r');

	close(fn);
};

on_change{'use_specific_wf_wave'} = define() {
	enable( 'user_specified_wf_wave', ${use_specific_wf_wave} );
	enable( 'select_wf_wind', ${use_specific_wf_wave} );
	enable_disable_library();
};

on_change{'select_wf_wave'} = define() {
	file = choose_file( path_only( value('user_specified_wf_wave') ), 'Choose a wave resource file', 
		'Wave Resource Files (*.csv|*.csv');
		
	if ( file != '' ) {
		file = replace(file, '\\', '/');
		value( 'user_specified_wf_wave', file );
	}
};

/////////////////////////////////////////////////////
// Functions ///
////////////////////////////////////////////////////

function test_decimal_degrees(loc_in)
{
	str = replace( loc_in, ', ', ',' );
	str = replace( str, ' ', ',' );
	arr = split( str, ',');
	if (#arr == 2) //for lat lon pair
	{
		//check for NSEW in string
		lat = lower(arr[0]);
		lon = lower(arr[1]);
		is_nsew = ( ( strpos(lat,'n') > -1 || strpos(lat,'s') > -1 ) && ( strpos(lon,'w') > -1 || strpos(lon,'e') > -1 ) );
		// check for values in range
		lat = to_real( arr[0] ); // lat = 0 if arr[0] is a string with no numbers
		lon = to_real( arr[1] ); // lon = 0 if arr[0] is a string with no numbers
		is_out_of_range =  ( ( lat <= -90 || lat >= 90 ) || ( lon <=-180 || lon >= 180 ) );
		is_string = ( lat == 0 && lon == 0 ); // assume no one is modeling a system at 0,0
		msg = '"' + loc_in + '"' + ' is not a valid lat/lon pair in Decimal Degrees (uses N/S, E/W)';
		loc_out = null;
		if ( is_string )
		{
			loc_out = loc_in;
			msg = '\"' + loc_in + '\"' + ' appears to be a city/state pair';
		}
		elseif ( !is_nsew && !is_out_of_range )
		{
			loc_out = str;
			msg = '\"' + loc_in + '\"' + ' appears to be a valid lat/lon pair in Decimal Degrees';
		}

	}
	else
	{
		loc_out = loc_in;
		msg = '\"' + loc_in + '\"' + ' appears to be a street address or location name';
	}
	return [loc_out, msg ]; 
}

function file_to_key( file ) 
{
		key = file_only( file );
		key = replace( key, '.' + ext_only( file ), '' );
		return key;
}

function slash_back_to_forward( str )
{
	return replace( str, '\\', '/' );
}

function wave_library( item, is_key )
{
	T = {};
	lib_file = userlocaldatadir() + '/WaveResourceData.csv';
	lib_data = csvread( lib_file, { 'table' = true } );
	files = lib_data{'File name'}; files -@ 0; files -@ 0;
	for( i=0; i<#files; i++) { files[i] = lower(slash_back_to_forward(files[i])); }
	keys = lib_data{'Name'}; keys -@ 0; keys -@ 0;
	if ( is_key ) { ii = keys ?@ item; }
	else { ii = files ?@ lower(item); }
	T{'is_in_library'} = false; 
	T{'lib_key'} = null;
	if ( ii > -1 ) 
	{
		T{'is_in_library'} = true; 
		T{'lib_key'} = keys[ii];
		T{'file_name'} = files[ii];
	}
	T{'num_files_in_library'} = #files;
	str = slash_back_to_forward( appdir() );
	arr = split( str, '/' );
	arr -@ #arr-1;
	arr[#arr] = 'location';
	default_path = '';
	for( i=0; i<#arr; i++ ) {default_path += arr[i] + '/'; }
	default_files = dir_list( default_path, '*', false );
	T{'num_default_files'} = #default_files;
	return T;
}

function update_info( ctxt )
{
	wf = value('wave_resource_file'); 
	L = strlen( value( 'library_folder_list' ) );
	/*msgbox('Hello from update_info() in ' + ctxt + '!\nsolar_resource_file = ' + value('solar_resource_file')
	       + '\nsolar_data_file_name = ' + value('solar_data_file_name')
	       + '\n\nsolar_data_file_name_load = ' + value('solar_data_file_name_load')  
	       + '\n\nuser_specified_weather_file = ' + value('user_specified_weather_file')
	       + '\n\nfile_name = ' + value('file_name') 
	       + '\n\nsolar_resource = ' + value('solar_resource') 
	       + '\n\nwf is in library = ' + solar_library(value('solar_resource_file'),false){'is_in_library'}
	       + '\n\ncurrent selection is in library = ' + solar_library(value('solar_resource'),true){'is_in_library'} );*/
	
	//if selected library file is no longer in library reload library, and exit
	wf_ok = false;
	if (!file_exists(wf) )
	{
		msg_caption = 'Weather file does not exist. Please choose or download a different file above.';
		msg_color = 'red';
		show_button = false;
		rescanlibrary('wave'); // remove deleted file from library
	}
	// display message depending on whether file is in library or is a user-specified file
	elseif ( wf != value('wave_data_file_name') )
	{
		msg_caption = 'The weather file is different from the file selected in the library because it was modified by an LK script. Click Add File to Library if you want the file to appear in the library list above.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( strlen( value( 'library_folder_list' ) ) < L ) // ** this check should never be true, right???
	{
		msg_caption = 'Weather file folder not in list? Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( !wave_library(slash_back_to_forward(value('wave_resource')),true){'is_in_library'} )
	{
		msg_caption = 'Weather file is not in library. Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	else
	{
		msg_caption = 'The following information describes the data in the highlighted weather file from the Wave Resource library above. This is the file SAM will use when you click Simulate.';
		msg_color = 'black';
		show_button = false;
		wf_ok = true;
	}

	// show / hide PV only summary data
	//is_pv = ( technology() == 'Flat Plate PV' || technology() == 'PVWatts' );
	is_wave = ( technology() == 'MEwave' );
	property( 'summary_caption' , 'Caption' , msg_caption );
	property( 'summary_caption' , 'TextColour' , msg_color );
	show('btn_add_file_to_library', show_button);
	show('group_optional', is_wave );
	//show('annual_snow', is_pv );
	//show('annual_albedo',is_pv );
	refresh(''); // always refresh after calling show()

	// display message for new users if library contains only default files
	property( 'caption_library', 'Caption', 'The default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.' );
	property( 'caption_library', 'TextColour', 'black' );
	lib = wave_library( 'dummy', false );
	if ( lib{'num_files_in_library'} == lib{'num_default_files'} )
	{
		property( 'caption_library', 'Caption', 'You have not added any weather files to your library. To add files, use the download tools below to get weather files from the NSRDB, or click Add Remove Weather File folders to add files from your computer. The default library comes with only a few weather files to help you get started.' );
		property( 'caption_library', 'TextColour', 'red' );
	}

	// calculate and display annual summary data
	if ( wf_ok )
	{
		obj = ssc_create();
		ssc_var( obj, 'file_name', wf );
		result = ssc_exec( obj, 'wfreader' );
		if ( 0 == result )
		{
			value( 'annual_global', ssc_var(obj, 'annual_global') );
			value( 'annual_beam', ssc_var(obj, 'annual_beam') );
			value( 'annual_diffuse', ssc_var(obj, 'annual_diffuse') );
			value( 'annual_tdry', ssc_var(obj, 'annual_tdry') );
			value( 'annual_wspd', ssc_var(obj, 'annual_wspd') );
			value( 'annual_snow', ssc_var(obj, 'annual_snow') );
			value( 'annual_albedo', ssc_var(obj, 'annual_albedo') );
			rhum = ssc_var(obj, 'rhum');
			rhum_ok = true;
			if ( isnan( rhum[0] ) ) { rhum_ok = false; }
			// used for timestep calculation in editscene3d
			value( 'wf_nrecords', ssc_var(obj, 'nrecords') );
		}
		else
		{
			msgbox('Weather file reader failed!\n' + result);
			value( 'annual_global', nan() );
			value( 'annual_beam', nan() );
			value( 'annual_diffuse', nan() );
			value( 'annual_tdry', nan() );
			value( 'annual_wspd', nan() );
			value( 'annual_snow', nan() );
			value( 'annual_albedo', nan() );
			value( 'wf_nrecords', nan() );
		}
		ssc_free( obj );
	}
	
	if ( librarygetcurrentselection('wave_resource') == '' )
	{
		librarynotifytext('wave_resource','Please choose a file. Nothing selected.');
	}
	elseif ( !solar_library(slash_back_to_forward(value('wave_resource')),true){'is_in_library'} ) 
	{
		librarynotifytext('wave_resource', 'Please choose a file. Current selection not in library.');
	}
	elseif (librarygetnumbermatches('wave_resource') < 1)
	{
		value('in_location', librarygetfiltertext('wave_resource'));
		librarynotifytext('wave_resource', 'No match found. Try downloading a weather file below.');
	}
	elseif ( librarygetcurrentselection('wave_resource') != file_to_key( value('wave_resource_file')) )
	{
		librarynotifytext('wave_resource','Current selection is different from weather file.');
	}
	else
	{
		librarynotifytext('wave_resource', ''); //'Everything is fine.'
		value('in_location', 'Type a location name, street address, or lat,lon in decimal degrees');
	}
	
	//msgbox('libraryget functions'+
	//'\nfiltertext = ' + librarygetfiltertext('solar_resource') 
	//+ '\nnumber matches = ' + librarygetnumbermatches('solar_resource') 
	//+ '\ncurrentselection = ' + librarygetcurrentselection('solar_resource'));
	
	display_tech_message();
}

// update ui list of library folders, and optionally add new path to library folders
function update_library_folders( new_path )
{
	//msgbox('Hello from update_library_folders()');
	x = get_settings('wave_data_paths');
	// add new path if provided and it doesn't already exist in the library
	if ( new_path != '' && dir_exists( new_path ) && ( strpos( x, new_path ) < 0 ) )
	{
		if ( x != '' ) { x += ';'; }
		x += slash_back_to_forward( new_path );
	}
	// list of library folders files to display on separate lines
	paths = split( x, ';' );
	// put solar download folder at top of list
	clean_list = '';
	// remove folders in list that no longer exist
	for (i = 0; i<#paths; i++ )
	{
		if ( dir_exists( paths[i] ) )
		{
			clean_list += paths[i];
			if ( i < #paths-1 ) { clean_list += ';'; }
		}	
	}		
	// update solar_data_paths used by library.cpp and nsrdb.cpp to cleaned list		
	set_settings('wave_data_paths', clean_list );
	// update list to display
	value( 'library_folder_list', get_settings('wave_download_path') + '\n' 
	       + replace( clean_list , ';' , '\n' ) );
	rescanlibrary( 'wave' );        
}

function display_tech_message() 
{
	str = '';
	str_and = '';
	tech = technology();
	csp_techs = ['Physical Trough','Empirical Trough','MSPT','DSPT','MSLF','DSLF','Dish Stirling','Generic CSP System'];
	for ( i=0; i<#csp_techs; i++ )
	{
		if ( tech == csp_techs[i] ) 
		{
			str = 'CSP models use a different time convention than NREL NSRDB data. See Help for details.';
		}	
	}
	if ( tech == 'Biopower' )
	{ 
		if ( isnan( value('annual_global') ) || !rhum_ok )
		{
			str = 'The Biopower model requires ';
		}
		if ( isnan( value('annual_global' ) ) ) 
		{
			str += 'global horizontal irradiance data ';
			str_and = 'and ';
		}	
		if ( !rhum_ok ) 
		{
		str += str_and + 'relative humidity data. See Help for details.';
		}	
	}
	property( '  ' , 'Caption', str );		
	property( 'caption_techs' , 'TextColour', 'red' );
}

function nsrdb_all() 
{
	hash = nsrdbquery();
	// meta data
	if ( hash != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		if ( fn != '' )
		{
			error = wf_check( fn );
		}	
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				value( 'use_specific_weather_file', 1 );
				fn = replace(fn, '\\', '/');
				value( 'user_specified_weather_file', fn );
			}
		}
		else
		{
			rescanlibrary( 'wave' );  //** is this necessary??
			if (fn != '')
			{
				value( 'use_specific_weather_file', 0 );
				value( 'wave_resource', file_to_key( fn ) );
			}
		}
	}
}

// clean up location string to use as file name
function clean_name( location )
{
	name = location;
	name = replace( name , ', ' , ',' );
	name = replace( name , ',' , '_' );
	name = replace( name , '  ' , ' ' );
	name = replace( name , ' ' , '_' );
	return lower(name);
}

function wave_database( location )
{
	name = '';
	tmy_name = '';
	url = '';
	tmy_url = '';
	years = [];
	tmy_years = [];
	msg = '';
	g = {'lat'=null,'lon'=null, tz=null, 'ok'=false};
	geocode_ok = false;
	json_ok = false;
	location_ok = false;
	if ( strpos(lower(location),'type a location name') > -1 )
	{
		msg += 'Invalid location name: \n\n' + location + '\n\n';
	}
	else
	{
		loc_test = test_decimal_degrees( location );
		msg += loc_test[1] + '\n\n';
		if (  loc_test[0] != null )
		{
			location_ok = true;
			location = loc_test[0];
			g = geocode( location );
			// sometimes correct address fails but works on second try
			if ( !g.ok ) { g = geocode( location ); }
			if ( g.ok ) { geocode_ok = true; }
		}
	}
	if ( geocode_ok )
	{
		url = webapi( 'nsrdb_query' );
		//url = webapi( 'mhkit_query' );
		url = replace( url, '<LAT>', g.lat );
		url = replace( url, '<LON>', g.lon );
		json_str = curl( url );
		msg += 'URL for Wave database query: ' + url + '\n\n';
		var = json_read( json_str );
		if ( typeof( var ) == 'table' )
		{
			if ( var.errors != [] )
			{
				msg += var.errors + '.\n';
				if ( strpos( lower(var.errors.code), 'api' ) > -1 ) // no or invalid api key
					{ msg += 'See private.h to set API keys.'; }
			}
			elseif ( var.outputs == null )
			{
				msg += 'No wave data available for \"' + location + '\".\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			elseif ( var.outputs == [] )
			{
				msg += 'No wave data available for \"' + location + '\".\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			else
			{
				json_ok = true;
			}	
		}
		else
		{
			msg += 'NSRDB did not return valid JSON string:\n';
			msg += json_str;
			if ( strpos( lower(json_str), 'api' ) > -1 ) // no or invalid api key
			{
				msg += 'See private.h to set API keys.\n';
			}	
		}
		if ( json_ok )
		{
			arr = var.outputs;
			single_year_dataset = -1;
			tmy_dataset = -1;
			for ( i=0; i<#arr; i++ )
			{
				name = arr[i].name;
				if ( name == 'suny-india' || name == 'psm3' )
				{
					single_year_dataset = i; 
				}
				elseif ( name == 'psm3-tmy' || name == 'suny-india-tmy' )
				{
					tmy_dataset = i;
				}
			}
			if ( single_year_dataset > -1 )
			{
				name = var.outputs[single_year_dataset].name;
				//url = split(var.outputs[single_year_dataset].links[0].link,'?')[0];
				url = var.outputs[single_year_dataset].apiUrl+'.csv';
				years = var.outputs[single_year_dataset].availableYears;
				//Multi year wave dataset?
				dataset_ok = true;
			}
			if ( tmy_dataset > -1 )
			{
				tmy_name = var.outputs[tmy_dataset].name;
				tmy_url = var.outputs[tmy_dataset].apiUrl+'.csv';
				tmy_years = var.outputs[tmy_dataset].availableYears;
				dataset_ok = true;
			}
			if ( tmy_dataset < 0 && single_year_dataset < 0 )
			{
				msg += 'No NSRDB PSM V3 data available for \"' + location + '\". ';
				msg += 'See https://sam.nrel.gov/weather for other sources of data.';
				dataset_ok = false;
			}
		}
	}
	else
	{
		geocode_ok = false;
		msg += 'Geocoding failed: Could not connect to service or failed to recognize \"' + location + '\" \n';
	}
	ok_test = ( ( geocode_ok == true ) && ( json_ok == true ) && ( dataset_ok == true ) && ( location_ok == true ) );
	return { 'name' = name , 'tmy_name' = tmy_name, 'msg' = msg , 'url' = url, 'tmy_url'=tmy_url, 'years' = years , 'tmy_years' = tmy_years, 'ok' = ok_test , 'lat' = g.lat, 'lon' = g.lon };
}

function wf_check( wf )
{
	if ( file_exists( wf ) )
	{
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
	}
	else
		result = 'Failed to open ' + wf + ' for checking.';
	return result;
}

// returns a single-year data file for the current NSRDB data available for a location
function mhkit_wave_get()
{
	//enum { TMY, SINGLE_YEAR, ALL_YEARS };
	//enum { ONE_LOCATION, MULTIPLE_LOCATIONS };
	//enum { HOURLY, HALF_HOURLY };
	enum { SINGLE_YEAR, SUBSET_YEAR, ALL_YEARS };
	msg = '';
	wf = '';
	download_ok = true;
	location_ok = true;
	folder = slash_back_to_forward( wfdownloaddir() );
	log_file = folder + '/mhkit_download_log.txt';
	if ( file_exists( log_file ) ) { flog = open( log_file , 'a' ); }
	else { flog = open( log_file, 'w' ); }
	write_line( flog, 'MHKit Download ' + date_time());
	write_line( flog, '==========================================================\n');	
	
	if ( value( 'in_time_frame' ) == SINGLE_YEAR )
	{	
		location = value('in_location');
		//timeframe = year of wave file
	}
	else
	{
		location_list = value('in_location_list'); // string with '|' delimiter
		location_list = replace( location_list, '\"', '' ); // files from spreadsheets may use quotes for strings
		location = split(location_list, '|');
	}
	if ( typeof( location ) == 'string' )
	{	location = [ location ]; }
	write_line( flog, 'Requested location(s): ' + location + '\n');
	pb_locations = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #location } );
	for ( n=0; n<#location; n++ )
	{
		write_line( flog, 'Location ' + to_string(n+1) + ' of ' + #location + ': \"' + location[n]  + '\"');
		write_line( flog, '----------------------------------------------------------\n');	
		progressbar( pb_locations, { 'message' = 'Getting download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		dataset[n] = nsrdb( location[n] );
		progressbar( pb_locations, { 'message' = 'Processing download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		if ( !dataset[n].ok )
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
			msg += dataset[n].msg + '\n';
			continue;
		}	
		/*x = value('in_nsrdb_options');
		if ( x == TMY )
		{	
			type = ['tmy']; // for now just download current tmy
		}
		elseif ( x == SINGLE_YEAR ) 
		{
			y = choose_from_list( dataset[n].years, 'Choose a year', 'Available Years for \"' + location[n] +'\"', 0 ); 
			if (y == '')
			{
				download_ok = false;
				write_line( flog, 'Year not valid: Selection cancelled by user.\n' );
				continue;
			}
			else	
			{	type = [to_int( y )]; }
		}
		else
		{	type = dataset[n].years; }*/
		write_line( flog, 'Requested year(s): ' + type );
		/*
		// verify that type parameter is a valid value and convert to array if needed
		d = typeof( type );
		bad = [];
		if ( d == 'string' && type == 'tmy' ) // download tmy only
		{	type = ['tmy']; }
		elseif ( d == 'string' ) // invalid parameter
		if ( d == 'string' ) // invalid parameter 
		{	bad[0] = type; }
		elseif ( d == 'number' ) // single year
		{
			type = [type];
			if ( ( dataset[n].years ?@ type[0] ) == -1 )
			{	bad[0] = type[0]; }
		}	
		elseif ( n == 0 ) // multiple years, keep good years and remove bad years, only need to do once
		if ( n == 0 ) // multiple years, keep good years and remove bad years, only need to do once
		{	
			j=0;
			for ( i=0; i<#type; i++ )
			{
				if ( ( dataset[n].years ?@ type[i] ) == -1 ) 
				{
					bad[j] = type[i];
					j++;
				}	
			}
			for ( i=0; i<#bad; i++ )
			{
				for ( j=0; j<#type; j++ )
				{
					if ( type[j] == bad[i] ) { type -@ j; }
				}		
			}			
		}
		//if ( bad == [] ) {	bad = 'None'; }
		else {	download_ok = false; }
		write_line( flog, 'Invalid requested years: ' + bad);
		*/
		if ( dataset[n].ok )
		{ 
			// portion of url that is the same for all download scenarios
			if ( type[0] == 'tmy' )
			{
				base_url = dataset[n].tmy_url;
			}
			else
			{
				base_url = dataset[n].url;
			}	
			base_url += '?api_key=<SAMAPIKEY>';
			base_url += '&full_name=sam_user';
			//base_url += '&email=<USEREMAIL>'; **CHANGE BACK**
			base_url += '&email=sam.support@nrel.gov';
			base_url += '&affiliation=unknown'; 
			base_url += '&mailing_list=false';
			base_url += '&reason=SAM';
			//base_url += '&interval=' + time_step; //No time series data yet for wave data
			base_url += '&utc=false'; // No UTC for wave data
			base_url += '&leap_day=false'; //No leap day considerations for wave data

			// create folder for multiple years to facilitate
			// p50 p90 and add to library folders list
			// do not put tmy file in multiple year folder
			// use default folder if mdkir() fails
			default_download_path = slash_back_to_forward( folder );
			tmy_path = slash_back_to_forward( default_download_path );
			path = slash_back_to_forward( default_download_path );
			if ( #type > 1 )
			{
				path = path + '/' + clean_name( location[n] ) ;
				if ( !dir_exists( path ) )
				{
					if ( !mkdir( path, false ) )
					{	path = default_download_path; }
				}
				if ( path != default_download_path /*&& i == 0*/)
				{	update_library_folders( path ); }
			}
			
			pb_years = progressbar( { 'title' = 'Download Progress for ' + location[n] , 'message' = 'Downloading, please wait...', 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #type } );
				
			// for each year
			base = base_url;
			for( i=0; i<#type; i++ )
			{
				base_url = base;
				progressbar( pb_years, { 'message' = 'Preparing file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
				file_skipped = false;
				no_current_data = false;
				// single-year 
				if ( dataset[n].name == 'psm3' && type[i] != 'tmy' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed';
					//base_url += '&attributes=jpd';
				}
				elseif ( dataset[n].name == 'suny-india' && type[i] != 'tmy' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed,snow_depth';
				}
				elseif ( type[i] != 'tmy' )
				{
					no_current_data = true;
					dataset_name = dataset[n].name;
					msg += 'No NSRDB PSM V3 or SUNY India data available for ' + dataset[n].location + '.\n';
					msg += 'See https://sam.nrel.gov/weather for other sources of data.';
				}
				// tmy
				if ( dataset[n].tmy_name == 'psm3-tmy' && type[i] == 'tmy' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed';
				}
				elseif ( dataset[n].tmy_name == 'suny-india-tmy' && type[i] == 'tmy' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed';
				}
				elseif ( type[i] == 'tmy' )
				{
					no_current_data = true;
					dataset_name = dataset[n].tmy_name;
					msg += 'No NSRDB PSM V3 TMY or SUNY India TMY data available for ' + dataset[n].location + '.\n';
					msg += 'See https://sam.nrel.gov/weather for other sources of data.';
				}
					
				write_line( flog, '\nFile ' + to_string(i+1) + ' of ' + #type + ': ' + type[i]);
				write_line( flog, '----------------------------------------------------------\n');	
				url = base_url + '&names=' + to_string(type[i]);
				url += '&wkt=POINT(' + dataset[n].lon + '%20' + dataset[n].lat + ')';
				write_line( flog, url + '\n');

				fname = path + '/' + clean_name( location[n] ) + '_' + dataset[n].lat + '_' + dataset[n].lon + '_psm3_' + time_step + '_' + type[i] + '.csv';

				if ( type[i] == 'tmy' ) 
				{
					fname = replace( fname, path, tmy_path ); 
					fname_tmy = fname;
				}
				if ( solar_library( fname, false ){'is_in_library'} )
				{
					file_skipped = true;
					str = 'File skipped, already exists: ' + fname + '\n';
					write_line( flog, str );
					msg += str + '\n';
					if ( #location == 1 )
					{
						value( 'solar_resource', file_to_key( fname ) );
					}	
				}
				elseif ( !no_current_data )	
				{
					start = start_timer();
					progressbar( pb_years, { 'message' = 'Downloading file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					wf = curl( url , { 'file'= fname } ); // curl() should replace <SAMAPI> and <USEREMAIL > with values from private.h
					time = elapsed_time() / 1000;
					progressbar( pb_years, { 'message' = 'Checking file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					write_line( flog, 'Download time: ' + time + ' seconds.\n' );
					wf_error = wf_check( fname );
					if ( wf_error != 0 ) // usually indicates NSRDB returned a file containing error message instead of weather data
					{
						download_ok = false;
						nsrdb_message = read_text_file( fname );
						write_line( flog, 'Weather file test failed, ' + wf_error + ': ' + fname + '.\n');
						write_line( flog, 'Message from NSRDB: ' + left( replace( nsrdb_message, '\n', ';'), 300 ) + '\n');
						msg += 'Weather file test failed for ' + file_only( fname ) + '.';
						fname_new = replace( fname, '.csv' , '_bad.txt' ); // rename file so next download attempt won't detect existing file
						ok = rename_file( fname , fname_new );
						if ( ok ) 
							write_line( flog, '* File renamed to: ' + fname_new + '.\n' );
						else
							write_line( flog, '* Failed to rename ' + fname + '.\n' );	
					}
					// set library to last file that was downloaded and passed weather file test
					elseif ( i == #type - 1 ) 
					{
						rescanlibrary('wave');
						fn = fname;
						value( 'solar_resource', file_to_key( fn ) );
						write_line( flog, 'Weather file test passed: ' + fname + '.\n');
					}	
				}
			}
			progressbar( pb_years );
		}	
		else
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
		}
	}
	progressbar( pb_locations );
	close ( flog );
	if ( download_ok && #type > 1 ) // multiple years
	{
		str = 'Download complete!\n';
		str += 'Multiple single-year files downloaded to:\n  ' + path + '\n\n';
		//str += 'Click \"P50 P90\" and choose this folder for P50 P90 simulations.\n\n';
		str += 'TMY file downloaded to:\n  ' + default_download_path + '\n';
		str += 'and selected from library for simulation to compare to P50 result.\n\n';
		str += '\n\nDo you want to show instructions for running a P50/P90 analysis now?';
		if ( yesno( str ) )
		{
			folder = path;
			p50p90_text = 'Instructions for running P50/P90 simulations:\n\n'
			+ '1. Click P50 / P90 at the bottom left of the main SAM window.\n\n'
			+ '2. Click the ellipses (...) to the right of the Select Weather File Folder box.\n\n'
			+ '3. Navigate to ' + folder + '.\n\n'
			+ '4. Click "Run P50/P90 simulations".\n'
			+ '\nIf you want to set a custom P value in addition to P10, P50 and P90, you can type a value for "Custom Px" before running the simulations.'
			+ '\n\nTo remove this note window, delete all of its contents and close the window.';
			pagenote( p50p90_text );
		}
	}
	elseif ( download_ok && !file_skipped && !no_current_data )
	{
		str = 'Download complete!\n';
		str += 'Weather file(s) downloaded to:\n' + path + '.\n';
		str += '\nOpen log file?';
		show_log = yesno( str );
		if ( show_log ) { browse( log_file ); }
	}
	elseif ( download_ok && file_skipped )
	{
		str = 'File already in library.\n Download skipped.\n\n' + fname;
		msgbox( str );
	}
	else 
	{
		show_log = yesno( 'Download Messages\n' + msg + '\nOpen log file?');
		if ( show_log ) { browse( log_file ); }
	}
}





