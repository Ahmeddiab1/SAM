//Marine Hydrokinetic (MHK) Model Macro
//Mar 2018

/*@

This macro multiplies a Wave Resource matrix with a Wave device power matrix and and assigns the calculated annual energy 
as the power plant generation profile. It also reads in cost data from an MHK Cost Breakdown Structure file and calculates
LCOE using NREL's Annual Technology Baseline methodology.
<br><br>

<i> Select the location of your resource file, power file, and Cost Breakdown Structure file on the right, then click 'Run macro' above to run the macro.

@*/
//@ name=res_file;type=filename;label=Resource file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/USA CA Eureka Humboldt Bay (NDBC).csv|csv
//@ name=pwr_file;type=filename;label=Power file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/Wave Power Matrix Example.csv|csv
//@ name=xl_file;type=filename;label=CBS file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/CBS SAM Template 2018Mar15.xlsx|xlsx,xls


//check that the Generic System and LCOE model are used, and that there is an active case
case = active_case();
if (case == '')
{
	msgbox('You must set an active case, Generic/LCOE Calculator.');
	exit;
}
config = configuration();
if (config[0] != 'Generic System')
{
	msgbox('The MHK calculator only works with Generic System selected as the technology model.');
	exit;
}
if (config[1] != 'LCOE Calculator')
{
	msgbox('The MHK calculator only works with the LCOE Calculator selected as the financial model.');
	exit;
}

//read in the resource file
//resource_file = choose_file('C:/Users/jfreeman/Documents/Projects/4 MHK', 'Choose a Resource File', 'CSV Files (*.csv)|*.csv', 0, 0, 'USA CA Eureka Humboldt Bay (NDBC).csv');
resource_file = macro.res_file;
resource = csvread(resource_file, {skip=3, numeric=true, table=false});

//read in the power file
//power_file = choose_file('C:/Users/jfreeman/Documents/Projects/4 MHK', 'Choose a Power Matrix File', 'CSV Files (*.csv)|*.csv', 0, 0, 'Wave Power Matrix Example.csv');
power_file = macro.pwr_file;
power = csvread(power_file, {skip=3, numeric=true, table=false});

//need to add a check that the resource and power matrices are 1:1 as far as periods and amplitudes, add some type of lookup capability?

//multiply the resource and power together
weighted_avg_power = 0;
rated_power = 0; //set the rated power as the maximum number in the power matrix
for (i=1; i<20; i++) //start at the first column, because column 0 contains row labels //need to not hardcode this number in!
	for (j=1; j<22; j++) //need to not hardcode this number
	{
		weighted_avg_power += resource[i][j] / 100 * power[i][j]; //convert resource from 4.5% to 0.045, multiply by power in kW
		if (power[i][j] > rated_power) rated_power = power[i][j]; //rated power is in kW, as is the power matrix
	}
//the weighted avg energy is going to be assigned evenly to every timestep, so there is no need to multiply by the number of hours in a year (8760)
outln('Weighted average power over the year = ' + weighted_avg_power);

//assign the annual energy to the generic case
set('spec_mode', 1); //select hourly energy profile
set('system_capacity', rated_power);
hourly_power = alloc(8760);
for(i=0; i<8760; i++)
	hourly_power[i] = weighted_avg_power; //units of kW
set('energy_output_array', hourly_power); 
set('derate', 0); //set system losses to zero
set('heat_rate', 0); //set heat rate to zero

//open the Excel Cost Breakdown Structure spreadsheet
//xl_path = choose_file('C:/Users/jfreeman/Documents/Projects/4 MHK', 'Choose the Cost Breakdown Structure (CBS) File', 'Excel Files (*.xlsx)|*.xlsx', 0, 0, 'generalized.cbs_.draft_mhk_aug.1.2014.xlsx');
xl_path = macro.xl_file;
xl = xl_create(xl_path, false);

//costs are in $, not $/kW, select appropriate input in UI
set('ui_cost_input_option', 0);

//Get CAPEX costs from CBS spreadsheet
capex = to_real(xl_get(xl, 'CAPEX'));
outln('Total CapEx = ' + capex);
set('ui_capital_cost_fixed', capex); //need to determine which ui_capital_cost_capacity

//Get OpEx costs from CBS spreadsheet
opex = to_real(xl_get(xl, 'OPEX'));
outln('Total OpEx = ' + opex);
set('ui_operating_cost_fixed', opex); //need to determine which ui_operating_cost_capacity

//get other costs for the pie chart from the CBS while we have it open
structure = to_real(xl_get(xl, 'Structure'));
pcc = to_real(xl_get(xl, 'PCC'));
development = to_real(xl_get(xl, 'Development'));
engmanag = to_real(xl_get(xl, 'EngManag'));
elecinfrast = to_real(xl_get(xl, 'ElecInfrast'));
commissioning = to_real(xl_get(xl, 'Commissioning'));
access = to_real(xl_get(xl, 'Access'));
install = to_real(xl_get(xl, 'Install'));
otherinfras = to_real(xl_get(xl, 'OtherInfras'));
foundation = to_real(xl_get(xl, 'Foundation'));
financial = to_real(xl_get(xl, 'Financial'));

//close the Excel Cost Breakdown Structure spreadsheet now that we're done with it
xl_close(xl);
xl_free(xl);

//need to determine if there are any other financial parameters that should be automatically set
set('ui_fixed_charge_rate', 0.108);
set('ui_fcr_input_option', 0);

//run the simulation and show the results page
simulate('', true);
//show_page('results'); //need to uncomment this

//create pie chart for the report- need to update these to real values
aep = get('first_year_output');
lcoe = get('lcoe_fcr');
fcr = get('fixed_charge_rate');

/*
//function to determine the % contribution to LCOE of a given capital cost
function lcoe_fraction(cost)
{
	return round((fcr * cost / aep) / lcoe * 100);
}

sectors = [ 
[ lcoe_fraction(structure), 'Structure' ],
[ lcoe_fraction(pcc), 'Power Conversion Chain' ],
[ lcoe_fraction(development), 'Development' ],
[ lcoe_fraction(engmanag), 'Engineering Management' ],
[ lcoe_fraction(elecinfrast), 'Elec. Infrastructure' ],
[ lcoe_fraction(commissioning), 'Commissioning' ],
[ lcoe_fraction(access), 'Site Access' ],
[ lcoe_fraction(install), 'Assembly/Installation' ],
[ lcoe_fraction(otherinfras), 'Other Infrastructure' ],
[ lcoe_fraction(foundation), 'Foundation/Mooring' ],
[ lcoe_fraction(financial), 'Financial Costs' ],
[ round(opex / aep/ lcoe * 100), 'OpEx' ] ]; //OpEx is treated differently since it happens every year

//need to reorder components so they're more visible on the plot

newplot();
sector(sectors);
plotopt({title = 'Contribution to LCOE of Selected Costs', showaxes=false, border=0});


function lcoe_cont(cost)
{
	return round((fcr * cost / aep));
}

newplot();
plot( [ 1 ], [lcoe_cont(structure)], {type='bar', color= [ 80, 98, 40 ], thick=20, series='Structure'});
plot( [ 1 ], [lcoe_cont(pcc)], {type='bar', color=[ 137, 169, 70 ], thick=20, series='Power Conversion Chain', stackon = 'Structure'});
plot( [ 1 ], [lcoe_cont(development)], {type='bar', color=[ 199, 216, 163 ], thick=20, series='Development', stackon = 'Power Conversion Chain'});
plot( [ 1 ], [lcoe_cont(engmanag)], {type='bar', color=[ 130, 201, 253 ], thick=20, series='Engineering Management', stackon = 'Development'});
plot( [ 1 ], [lcoe_cont(elecinfrast)], {type='bar', color=[ 110, 165, 226 ], thick=20, series='Elec. Infrastructure', stackon = 'Engineering Management'});
plot( [ 1 ], [lcoe_cont(commissioning)], {type='bar', color=[ 85, 111, 208 ], thick=20, series='Commissioning', stackon = 'Elec. Infrastructure'});
plot( [ 1 ], [lcoe_cont(access)], {type='bar', color=[ 38, 115, 207 ], thick=20, series='Site Access', stackon = 'Commissioning'});
plot( [ 1 ], [lcoe_cont(install)], {type='bar', color=[ 27, 68, 113 ], thick=20, series='Assembly/Installation', stackon = 'Site Access'});
plot( [ 1 ], [lcoe_cont(otherinfras)], {type='bar', color=[ 14, 42, 77 ], thick=20, series='Other Infrastructure', stackon = 'Assembly/Installation'});
plot( [ 1 ], [lcoe_cont(foundation)], {type='bar', color=[112, 48, 160 ], thick=20, series='Foundation/Mooring', stackon = 'Other Infrastructure'});
plot( [ 1 ], [lcoe_cont(financial)], {type='bar', color=[  71, 36, 105 ], thick=20, series='Financial Costs', stackon = 'Foundation/Mooring'});
plot( [ 1 ], [round(opex / aep)], {type='bar', color=[  71, 36, 160 ], thick=20, series='OpEx', stackon = 'Foundation/Mooring'}); //OpEx is treated differently since it happens every year
axis('x1', { type='label', labels=[[1,'LCOE']], 'min'=0, 'max'=2 });
axis('y1', { 'min' = 0, 'max' = lcoe * 1.1});
*/


//Ask user if they would like to generate a PDF report from these results
if (yesno('Would you like to generate a PDF report with these results?'))
{
	//pass information to the report from the CBS spreadsheet
	data.device_rating = rated_power;
	data.device_avg_power = weighted_avg_power;
	data.num_devices = 1; //need to read this in from the spreadsheet
	
	//write the plot to the report //need to update with actual plot
	piechartfile = 'C://users/jfreeman/desktop/charttest.png';//tempfile('png'); //specify a temporary location to save the plot
	//plotout(plotLocation); //write the plot to that location
	data.pieplot = 1;
	data.piechartfile = piechartfile; //add the plot to the data being passed to the report

	reportfile = choose_file(homedir(), 'Output report file', 'PDF files (*.pdf)|*.pdf'); 
	if (reportfile == '') exit; //if statement covers the case where someone hits cancel
	templatefile = runtimedir() + 'macros/Generic System/mhkwindwizard.samreport';
	ok = pdfreport(reportfile, {template = templatefile, metadata = data}); //need to finish report template
	if (ok)	browse(reportfile); //open the report
	else (msgbox('Report generation failed.'));
	
	// Delete temporary tornado plot
	//remove_file( plotLocation );
}



