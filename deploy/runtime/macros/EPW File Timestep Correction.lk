/*@
Currently, the recorded GHI value in some EPW weather files does not match the calculated GHI value in SAM. This discrepancy is due to 
a non-standard minute timestep in  the weather file. This macro allows you to change the minute timestep recording in the EPW weather file 
to close the gap between the recorded and calculated GHI values respectively. 

<br>
<br>
<b>Note: </b>The EPW weather file with the corrected minute timestep is converted to a CSV file and stored in the same folder with the extension (*_samcsv.csv).
<br>
<br>
<img src="$MACROPATH/epw_timeshift.JPG">
@*/


//=========================================================================================================================================================
//	The first 2 specifies the number of graphs you_re going to create, the second 1 is timestep (1 means hourly), then a graph label, then the series 1 label,
//	series 1 units label, whether or not the series is selected when the window pops up (1 means yes), series 1 data, series 2 label, series 2 units label, 
//	whether or not series 2 is selected (1 means yes), series 2 data.

//	dview(2, 1, 'Lifetime System Power', 'DC Power', 'kW', 1.0, dc.timeseries_dc_power, 'AC Power', 'kW', 1.0, ac.timeseries_ac_power);




//=========================================================================================================================================================

// convert TMY2, TMY3, or EPW file formats to SAM CSV using the SSC wfcsvconv compute module
function ssc_wfcsvconv( wf  )
{
	obj = ssc_create();
	ssc_var( obj, 'input_file', wf );
	result = ssc_exec( obj, 'wfcsvconv', true );
	if ( result == 0 )
	{
		output = ssc_var( obj, 'output_file');
		if ( file_exists(output) )
		{
			// wfcsvconv names file based on header info appropriate for legacy
			// versions of SAM to display library but not needed now so renaming
			// to less confusing name based on input file name:
			// input_file.csv is converted to input_file_samcsv.csv
			arr = split( wf , '.' );
			arr[ #arr-1 ] = '_samcsv.csv';
			new_name = arr[0];
			for( i=1; i<#arr; i++ ) { new_name += '.' + arr[i]; }
			new_name = replace( new_name, '._', '_');
			/*ext = ext_only( wf );
			if ( ext == 'tm2' ) { new_name = replace( wf, '.' + ext, '.csv' );	}
			elseif ( ext == 'epw' ) { new_name = replace( wf, '.' + ext, '.csv' );	}
			else { new_name = wf; }
			new_name = replace( new_name, '.csv', '_samcsv.csv' );*/
			
			ok = rename_file( output, new_name );
			if ( !ok ) { outln( 'Failed to rename file.' );}
			outln('Weather file successfully converted to:\n\t' + new_name );
			
			
					 
			
			//corrected_ghi = get('gh_calc');
			//outln(get('gh_calc'));
			
			
			tcorr = in('Enter minute timestep correction:', '0', '');
			txt = csvread(new_name);
			j = 0;
			for (i = 3; i < 8763; i++){
				t[j] = j;
				txt[i][4] = tcorr;
				recorded_ghi[j] = txt[i][5];
				j++;
			}	
			
			csvwrite(new_name, txt);
			uiyield();
			new_name = 'C:/Users/PBHASKAR/sam/deploy/solar_resource/imperial_ca_32.835205_-115.572398_psmv3_60_tmy.csv';
			set('solar_resource', new_name);
			set('solar_resource_file', new_name);
			
			simulate('', true);
			calculated_ghi = get('gh_calc');
			
			dview(2, 1, 'Recorded v. Calculated GHI', 'Irradiance GHI Recorded', 'W/m2', 1.0, recorded_ghi, 'Irradiance GHI Calculated', 'W/m2', 0.0, calculated_ghi );



			
				
			
			browse( path_only(new_name) ); // show output file folder
			
						
		}
		else
		{
			outln('An error occurred and the file could not be converted.');
		}
	}
	else
		outln( 'Error: ' + result );
	ssc_free( obj );
}

//=========================================================================================================================================================

function main()
{
	ext = 'epw';
	format = 'EPW';
	input_file = choose_file( '', 'Choose weather file to convert', 'Weather Files (*.epw)|*.' + ext);
	if ( input_file == '' ) return;

	outln( 'File to convert is:\n\t' + input_file );

	use_wfcsvconv = (format == 'EPW' );
	
	
	if ( use_wfcsvconv ) { ssc_wfcsvconv( input_file ); }
	
	else { outln( 'No format specified.' ); }
	
	outln( 'Done.');
}


//=========================================================================================================================================================


function wf_check ( wf )
{
	obj = ssc_create();
	ssc_var( obj, 'input_file', wf );
	result = ssc_exec( obj, 'wfcheck', {'show_dialog'=true, 'dialog_title'='Processing'} );
	if ( result == 0 )
	{
		n = ssc_var( obj, 'nwarnings');
		if ( n == 0 )
		{
			outln('File passed weather file check.');
			return true;
		}	
		else
		{
			outln( 'File failed weather file check:' );
			for( i=0;i<n;i++ )
			{
				outln( '\t* ' + ssc_var( obj, 'warning' + to_string(i) ) );
			}
			return false;
		}
	}
	else
	{
		outln( 'Failed to run weather file check:\n\n' + result );
		return false;
	}
	ssc_free( obj );
}

//=========================================================================================================================================================

main();
			







