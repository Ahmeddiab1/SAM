/*@

@*/
//@ name=plantCostInput;type=filename;label=Import Plant Cost;value=|xlsx;
//@ name=avoidedCostInput;type=filename;label=Import Avoided Cost;value=|xlsx;
//@ name=capWorthInput;type=filename;label=Import Capacity Worth Factor;value=|xlsx;
//@ name=capPriceInput;type=filename;label=Import Capacity Price Forecast;value=|xlsx;
//@ name=rcbAnnualInput;type=filename;label=Import RCB Annual Values;value=|xlsx;
//@ name=startYearInput;type=number;label=Energy Budget Start Year;value=2018;
//@ name=projectLifeInput;type=number;label=Project Life (yrs);
//@ name=lifetimeInput;type=combo;label=Run Full Lifetime;value=Yes,No;sel=0
//@ name=hurdleRateInput;type=number;label=Hurdle Rate (%);
//@ name=transmissionInput;type=number;label=Transmission Loss Correction Factor(%);
//@ name=daylightSavingsInput;type=combo;label=Apply Daylight Savings;value=Yes,No;sel=0
//@ name=timezoneInput;type=combo;label=Time Zone of Energy Budget;value=Same as weather,HST (UTC-10),AKST (UTC-9),PST (UTC-8),MST (UTC-7),CST (UTC-6),EST (UTC-5);sel=5

// general inputs
//hurdleRate = 0.075;
//startYear = 5;
//projectLife = 25;
//transmissionLoss = 0.012;
//tz = -5;
//useLifetime = true;
//adjustTimeZone = true;
//applyDaylightSavings = true;

//plantCostFile = '';
//avoidedCostFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Avoided_Cost.csv';
//capPriceFcastFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Cap_Price_Fcast.csv';
//capWorthFactorFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Cap_Worth_Factor.csv';
//RCBAnnualFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/RCB_Annual.csv';

// get array from Excel file by row- or column-major order
function getFromFile(file, order, skip){
	if (!file_exists(file)) {
		if (#file > 0) outln('Input file error: ' + file + ' does not exist.');
		else outln('Input file missing.');
		exit;
	}
	if (ext_only(file) == 'xlsx'){
		XL = xl_create(file);
		data = xl_read(XL, {'skip'=skip, 'numeric'=1, 'order'=order});
		xl_free(XL);
		xl_close(XL);
		return data;
	}
}

// *****Get input variables from interface***** //
if (typeof(macro) == 'unknown') {
	outln("error: macro must be run from a case");
	exit;
}

if (get("inverter_model") != 1){
	outln("Inverter model set to 'Inverter Datasheet'");
	set("inverter_model", 1);
}
if (get("inv_ds_eff_type") != 1){
	outln("Inverter efficiency type set to 'Manufacturer efficiency'");
	set("inv_ds_eff_type", 1);
}

set("system_use_lifetime_output",0);
set("analysis_period",25);
set("pv_lifetime_simulation",0);
outln(get("pv_lifetime_simulation"));
errorString = "";
simSuccess = simulate(errorString);
outln(errorString);
outln(get("gen"));
gen = parametric_get("gen");
outln(gen);
exit;
// process files
plantCostFile = macro.plantCostInput;
avoidedCostFile = macro.avoidedCostInput;
capWorthFactorFile = macro.capWorthInput;
capPriceFcastFile = macro.capPriceInput;
RCBAnnualFile = macro.rcbAnnualInput;

avoidedCost = getFromFile(avoidedCostFile, 'c', 0);
plantCost = getFromFile(plantCostFile, 'r', 1);
capPriceFcast = getFromFile(capPriceFcastFile, 'r', 1);
capWorthFactor = getFromFile(capWorthFactorFile, 'c', 1);
RCBAnnual = getFromFile(RCBAnnualFile, 'r', 1);

startYear = macro.startYearInput;
projectLife = macro.projectLifeInput;

maxYear = max(RCBAnnual[#RCBAnnual-1][0], capPriceFcast[#capPriceFcast-1][0], avoidedCost[#avoidedCost-1][0]);
if (startYear + projectLife > maxYear + 1) {
	outln("Starting year plus project lifetime length exceeds available budget data.");
	exit;
}

useLifetime = (macro.lifetimeInput == "Yes") ? true: false;
hurdleRateInput = macro.hurdleRateInput;
transmissionLoss = macro.transmissionInput;
applyDaylightSavings = (macro.daylightSavingsInput == "Yes") ? true: false;

adjustTimeZone = true;
if (macro.timezoneInput == "Same as weather") adjustTimeZone = false;
if (useLifetime){
	//parametric_set("system_use_lifetime_output",1);
	//parametric_set("analysis_period", projectLife);
	x = 0;
}

errorString = "";


simSuccess = simulate(errorString);
if (simSuccess == 0 ){
	outln(errorString);
	exit;
} 

gen = parametric_get("gen");
tz = parametric_get("tz");

if (#tz != #plantCost){
	outln("Number of rows in parametric table, " + #tz + ", not equal to number of runs in PlantCost, " + #plantCost);
}

// plant specs
nPlants = 2;
manufacturerEfficiency = [96,96];
maxACOutputPower = [1000000,1000000];
azimuth = [180,180];
DCtoACRatio = [1.3,1.3];
desiredArraySize = [1.3e3,1.3e3];
tilt = [0,30];
trackingMode = ['1 Axis', 'fixed'];

// plant costs
capitalCost = [120000,125000];
OMCostPerKWYear = [10,11];
OMVariableCost = [0, 0];
transDistCost = [20000, 20000];
ppaFixed = [40, 45];
ppaEscStart = [25, 30];
ppaEscalator = [0.02, 0.02];
ppaAnnual = [[25, 25.5, 26, 26.5, 27, 27.5, 28, 28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5, 34, 34.5, 35, 35.5, 36, 36.5, 37], 
	[28, 28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5, 34, 34.5, 35, 35.5, 36, 36.5, 37, 37.5, 38, 38.5, 39, 39.5, 40]];





// test gen to make sure project life = gen/8760
if (active_case()){
	genCase = get('gen');
	//if (genCase) gen = genCase;
	// need to get gen for each run
}

// *****shift solar profile to central standard time***** //
if (adjustTimeZone){
	hoursForward = (tz + 6);
	for (r=0; r< nPlants; r++) {
		if (hoursForward > 0 ) {
			tmp = [];
			for (h= 0; h< hoursForward; h++){
				tmp[h] = gen[#gen-hoursForward+h][r+1];
			}
			for (h=#gen-1; h>hoursForward-1; h--){
				gen[h][r+1] = gen[h-hoursForward][r+1];
			}
			for (h=0; h<hoursForward; h++){
				gen[h][r+1] = tmp[h];
			}
		}
		else {
			tmp = [];
			for (h=0; h<-hoursForward; h++){
				tmp[h] = gen[h][r+1];
			}
			for (h=0; h<#gen+hoursForward; h++){
				gen[h][r+1] = gen[h-hoursForward][r+1];
			}
			for (h=0; h<-hoursForward; h++){
				gen[#gen+hoursForward+h][r+1] = tmp[h];
			}
		}
	}
}

// *****apply daylight savings to solar profile***** //
if (applyDaylightSavings){
	hourStartDST =  1657;	// estimated date of second Sunday of March: 11
	hourEndDST = 7345;		// estimated date of first Sunday of Nov: 3

	for (r=0; r<nPlants; r++){
		for (y=0; y<projectLife; y++){
			for (h=hourStartDST+8760*y; h<hourEndDST+8760*y; h++){
				gen[h][r+1] = gen[h+1][r+1];
			}
		}
	}
}

// *****per-year calcuations for each plant***** //
function colSum(data, col, rowStart, rowEnd){
	sumTotal = 0;
	for (n = rowStart; n < rowEnd; n++) {	
		sumTotal += data[n][col];
	}
	return sumTotal;
}
startYear -= 1; // reindex to 0
for (r = 0; r < nPlants; r++) {
	for (yr = 0; yr < projectLife; yr++){
		energy[r][yr] = colSum(gen, r+1, 8760*yr, 8760*(yr+1)-1)/1000*(1-transmissionLoss);
		discountedEnergy[r][yr] = energy[r][yr]/pow(1+hurdleRate,yr);
		energyVal[r][yr] = 0 ;
		capEqu[r][yr] = 0;
		for (hr = 0; hr < 8760; hr++){
			// leap year does not seem to be factored in?
			energyVal[r][yr] += gen[yr*8760+hr][r+1]*(1-transmissionLoss)*avoidedCost[hr][yr+1+startYear]/1000;
			capEqu[r][yr] += gen[yr*8760+hr][r+1]*(1-transmissionLoss)*capWorthFactor[hr][1]/1000;
		}
		capValperKW[r][yr] = capEqu[r][yr]*(capPriceFcast[yr+startYear][1]/100.);
		capVal[r][yr] = capValperKW[r][yr]*desiredArraySize[r]/DCtoACRatio[r];
		RCBAdj[r][yr] = 0;
		if (trackingMode[r] == 'fixed' || trackingMode[r] == 'Fixed'){
			RCBAdj[r][yr] = energy[r][yr]*RCBAnnual[yr+startYear][1];
		}
		else if (trackingMode[r] == '1 Axis' || trackingMode[r] == '1 axis' || trackingMode[r] == 'tracking'){
			RCBAdj[r][yr] = energy[r][yr]*RCBAnnual[yr+startYear][2];
		}
		else {
			outln(trackingMode[r] + ' tracking mode not recognized. Exiting.');
			close;
		}
		totalVal[r][yr] = energyVal[r][yr]+capVal[r][yr]+RCBAdj[r][yr];
		discountedVal[r][yr] = totalVal[r][yr]/pow(1+hurdleRate, yr);
		OMCost[r][yr] = OMCostPerKWYear[r]*maxACOutputPower[r]/1000+OMVariableCost[r]*energy[r][yr];
		discOM[r][yr] = OMCost[r][yr]/pow(1+hurdleRate,yr);
		ppaFixedCost[r][yr] = energy[r][yr]*ppaFixed[r];
		ppaFixedCostDisc[r][yr] = ppaFixedCost[r][yr]/pow(1+hurdleRate,yr);
		ppaEscCost[r][yr] = energy[r][yr]*ppaEscStart[r]*pow(1+ppaEscalator[r],yr);
		ppaEscCostDisc[r][yr] = ppaEscCost[r][yr]/pow(1+hurdleRate,yr);
		ppaAnnCost[r][yr] = energy[r][yr]*ppaAnnual[r][yr];
		ppaAnnCostDisc[r][yr] = ppaAnnCost[r][yr]/pow(1+hurdleRate,yr);
	}
	PVB[r] = sum(discountedVal[r]);
	LCOE[r] = PVB[r]/sum(discountedEnergy[r]);
	selfBuildNPV[r] = PVB[r] - capitalCost[r] - transDistCost[r] - sum(OMCost[r]);
	ppaNPVFixed[r] = PVB[r] - sum(ppaFixedCostDisc[r]);
	ppaNPVEsc[r] = PVB[r] - sum(ppaEscCostDisc[r]);
	ppaNPVAnn[r] = PVB[r] - sum(ppaAnnCostDisc[r]);
	
}

// format output CSV
csvOut[0][0] = 'Run';
csvOut[0][1] = 1;
headers = ['Year', 'Energy(MWh)', 'Discounted Energy (MWh)', 'Energy Value ($)', 'Capacity Equivalent',
	'Capacity Value ($/kW)', 'Capacity Value ($)', 'RCB Adj ($)', 'Total Value', 'Discounted Value',
	'O&M Cost', 'Disc. O&M Cost', 'PPA Cost (Fixed)', 'Disc. PPA Cost (Fixed)', 'PPA Cost (Esc)',
	'Disc. PPA Cost (Esc)', 'PPA Cost Ann', 'Disc. PPA Cost (Ann)'];
for (i = 0; i < #headers; i++){
	csvOut[1][i] = headers[i];
}
r=0;
for (yr = 0; yr < projectLife; yr++){
	csvOut[yr+2][0] = yr;
	csvOut[yr+2][1] = energy[r][yr];
	csvOut[yr+2][2] = discountedEnergy[r][yr];
	csvOut[yr+2][3] = energyVal[r][yr];
	csvOut[yr+2][4] = capEqu[r][yr];
	csvOut[yr+2][5] = capValperKW[r][yr];
	csvOut[yr+2][6] = capVal[r][yr];
	csvOut[yr+2][7] = RCBAdj[r][yr];
	csvOut[yr+2][8] = totalVal[r][yr];
	csvOut[yr+2][9] = discountedVal[r][yr];
	csvOut[yr+2][10] = OMCost[r][yr];
	csvOut[yr+2][11] = discOM[r][yr];
	csvOut[yr+2][12] = ppaFixedCost[r][yr];
	csvOut[yr+2][13] = ppaFixedCostDisc[r][yr];
	csvOut[yr+2][14] = ppaEscCost[r][yr];
	csvOut[yr+2][15] = ppaEscCostDisc[r][yr];
	csvOut[yr+2][16] = ppaAnnCost[r][yr];
	csvOut[yr+2][17] = ppaAnnCostDisc[r][yr];	
}
csvwrite('C:/Users/dguittet/Documents/Southern Company Scripting/gen.csv', gen);
csvwrite('C:/Users/dguittet/Documents/Southern Company Scripting/output.csv', csvOut);

// *****Create HTML Output Window***** //

str = 	'<html><body>'+
		'<h3><font size = "4">Plant Comparison</font></h3>'+
		'<table bgcolor=#dddddd width=100%>'+
		'<tr><th>Plant</th>'+
		'<th>LCOE ($/MWh)</th>'+
		'<th>PVB ($)</th>'+
		'<th>Self Build NPV*</th>'+
		'<th>PPA NPV (Fixed)**</th>'+
		'<th>PPA NPV (Esc.)**</th>'+
		'<th>PPA NPV (Ann.)**</th></tr>';
trbg = '<tr bgcolor=#ffffff><td>';
for (r=0; r<nPlants; r++){
	if (mod(r,2) == 1){
		trbg = '<tr><td>';
	}
	str += trbg;
	str += r+1;
	str += '</td><td align="right">';
	str += LCOE[r];
	str += '</td><td align="right">';
	str += PVB[r];
	str += '</td><td align="right">';
	str += selfBuildNPV[r];
	str += '</td><td align="right">';
	str += ppaNPVFixed[r];
	str += '</td><td align="right">';
	str += ppaNPVEsc[r];
	str += '</td><td align="right">';
	str += ppaNPVAnn[r];
	str += '</td></tr>';
}

str += '</table>';
str += '<p align = "right">*levelized sum of cap costs plus T&D cost vs disc. value<br>';
str += '**including T&D cost<br></p></body></html>';

html_dialog(str, 'Plant Comparison', [1000,800]);