/*@
Soco
@*/
//@ name=plantCostInput;type=filename;label=Import Plant Cost;value=|csv,xlsx;
//@ name=avoidedCostInput;type=filename;label=Import Avoided Cost;value=|csv,xlsx;
//@ name=capWorthInput;type=filename;label=Import Capacity Worth Factor;value=|csv,xlsx;
//@ name=capPriceInput;type=filename;label=Import Capacity Price Forecast;value=|csv,xlsx;
//@ name=rcbAnnualInput;type=filename;label=Import RCB Annual Values;value=|csv,xlsx;
//@ name=startYearInput;type=number;label=Energy Budget Start Year;value=1;
//@ name=projectLifeInput;type=number;label=Project Life (yrs);
//@ name=lifetimeInput;type=combo;label=Run Full Lifetime;value=Yes,No;sel=0
//@ name=hurdleRateInput;type=number;label=Hurdle Rate (%);
//@ name=transmissionInput;type=number;label=Transmission Loss Correction Factor(%);
//@ name=daylightSavingsInput;type=combo;label=Apply Daylight Savings;value=Yes,No;sel=0
//@ name=timezoneInput;type=combo;label=Time Zone of Energy Budget;value=-6,Same as weatherfile;sel=0

// general inputs
hurdleRate = 0.075;
startYear = 5;
projectLife = 25;
transmissionLoss = 0.012;
tz = -5;
useLifetime = true;
adjustTimeZone = true;
applyDaylightSavings = true;

plantCostFile = '';
avoidedCostFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Avoided_Cost.csv';
capPriceFcastFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Cap_Price_Fcast.csv';
capWorthFactorFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Cap_Worth_Factor.csv';
RCBAnnualFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/RCB_Annual.csv';
genFile = 'C:/Users/dguittet/Documents/Southern Company Scripting/Solar_Profile.csv';

// *****Get input variables from interface***** //
if (typeof(macro) != 'unknown') {
	plantCostFile = macro.plantCostInput;
	avoidedCostFile = macro.avoidedCostInput;
	capWorthFactorFile = macro.capWorthInput;
	capPriceFcastFile = macro.capPriceInput;
	RCBAnnualFile = macro.rcbAnnualInput;
	startYear = macro.startYearInput;
	projectLife = macro.projectLifeInput;
	useLifetime = macro.lifetimeInput;
	hurdleRateInput = macro.hurdleRateInput;
	transmissionLoss = macro.transmissionInput;
	applyDaylightSavings = macro.daylightSayingsInput;
	if (macro.timezoneInput != '-6') adjustTimeZone = false;
	if (active_case()){
		wfFile = get('solar_resource_file');
		wfData = ssc_create();
		ssc_var(wfData, 'file_name', wfFile);
		ssc_var(wfData, 'header_only', 1);
		result = ssc_exec(wfData, 'wfreader');
		if (result == 0){
			tz = ssc_var(wfData, 'tz');
			outln(tz);
		}
		else{
			outln('Error in reading selected weather resource file.');
			exit;
		}
	}
}

if (startYear + projectLife > 51) {
	outln("Starting year plus project lifetime length exceeds available budget data.");
	exit;
}

// plant specs
nPlants = 2;
manufacturerEfficiency = [96,96];
maxACOutputPower = [1000000,1000000];
azimuth = [180,180];
DCtoACRatio = [1.3,1.3];
desiredArraySize = [1.3e3,1.3e3];
tilt = [0,30];
trackingMode = ['1 Axis', 'fixed'];

// plant costs
capitalCost = [120000,125000];
OMCostPerKWYear = [10,11];
OMVariableCost = [0, 0];
transDistCost = [20000, 20000];
ppaFixed = [40, 45];
ppaEscStart = [25, 30];
ppaEscalator = [0.02, 0.02];
ppaAnnual = [[25, 25.5, 26, 26.5, 27, 27.5, 28, 28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5, 34, 34.5, 35, 35.5, 36, 36.5, 37], 
	[28, 28.5, 29, 29.5, 30, 30.5, 31, 31.5, 32, 32.5, 33, 33.5, 34, 34.5, 35, 35.5, 36, 36.5, 37, 37.5, 38, 38.5, 39, 39.5, 40]];



// get data from .csv
// first element of each row is index, values start at 2nd column

function getFromFile(file){
	if (!file_exists(file)) {
		if (#file > 0) outln('Input file error: ' + file + ' does not exist.');
		else outln('Input file missing.');
		exit;
	}
	if (ext_only(file) == 'csv'){
		data = csvread(file, {'skip'=1, 'numeric'=1});
		return data;
	}
	else if (ext_only(file) == 'xlsx'){
		data = xl_read(file, {'skip'=1, 'numeric'=1});
		return data;
	}
}

avoidedCost = getFromFile(avoidedCostFile);
capPriceFcast = getFromFile(capPriceFcastFile);
capWorthFactor = getFromFile(capWorthFactorFile);
RCBAnnual = getFromFile(RCBAnnualFile);
gen = getFromFile(genFile);

// test gen to make sure project life = gen/8760
if (active_case()){
	genCase = get('gen');
	//if (genCase) gen = genCase;
	// need to get gen for each run
}

// *****shift solar profile to central standard time***** //
if (adjustTimeZone){
	hoursForward = (tz + 6);
	for (r=0; r< nPlants; r++) {
		if (hoursForward > 0 ) {
			tmp = [];
			for (h= 0; h< hoursForward; h++){
				tmp[h] = gen[#gen-hoursForward+h][r+1];
			}
			for (h=#gen-1; h>hoursForward-1; h--){
				gen[h][r+1] = gen[h-hoursForward][r+1];
			}
			for (h=0; h<hoursForward; h++){
				gen[h][r+1] = tmp[h];
			}
		}
		else {
			tmp = [];
			for (h=0; h<-hoursForward; h++){
				tmp[h] = gen[h][r+1];
			}
			for (h=0; h<#gen+hoursForward; h++){
				gen[h][r+1] = gen[h-hoursForward][r+1];
			}
			for (h=0; h<-hoursForward; h++){
				gen[#gen+hoursForward+h][r+1] = tmp[h];
			}
		}
	}
}

// *****apply daylight savings to solar profile***** //
if (applyDaylightSavings){
	hourStartDST =  1657;	// estimated date of second Sunday of March: 11
	hourEndDST = 7345;		// estimated date of first Sunday of Nov: 3

	for (r=0; r<nPlants; r++){
		for (y=0; y<projectLife; y++){
			for (h=hourStartDST+8760*y; h<hourEndDST+8760*y; h++){
				gen[h][r+1] = gen[h+1][r+1];
			}
		}
	}
}

// *****per-year calcuations for each plant***** //
function colSum(data, col, rowStart, rowEnd){
	sumTotal = 0;
	for (n = rowStart; n < rowEnd; n++) {	
		sumTotal += data[n][col];
	}
	return sumTotal;
}
startYear -= 1; // reindex to 0
for (r = 0; r < nPlants; r++) {
	for (yr = 0; yr < projectLife; yr++){
		energy[r][yr] = colSum(gen, r+1, 8760*yr, 8760*(yr+1)-1)/1000*(1-transmissionLoss);
		discountedEnergy[r][yr] = energy[r][yr]/pow(1+hurdleRate,yr);
		energyVal[r][yr] = 0 ;
		capEqu[r][yr] = 0;
		for (hr = 0; hr < 8760; hr++){
			// leap year does not seem to be factored in?
			energyVal[r][yr] += gen[yr*8760+hr][r+1]*(1-transmissionLoss)*avoidedCost[hr][yr+1+startYear]/1000;
			capEqu[r][yr] += gen[yr*8760+hr][r+1]*(1-transmissionLoss)*capWorthFactor[hr][1]/1000;
		}
		capValperKW[r][yr] = capEqu[r][yr]*(capPriceFcast[yr+startYear][1]/100.);
		capVal[r][yr] = capValperKW[r][yr]*desiredArraySize[r]/DCtoACRatio[r];
		RCBAdj[r][yr] = 0;
		if (trackingMode[r] == 'fixed' || trackingMode[r] == 'Fixed'){
			RCBAdj[r][yr] = energy[r][yr]*RCBAnnual[yr+startYear][1];
		}
		else if (trackingMode[r] == '1 Axis' || trackingMode[r] == '1 axis' || trackingMode[r] == 'tracking'){
			RCBAdj[r][yr] = energy[r][yr]*RCBAnnual[yr+startYear][2];
		}
		else {
			outln(trackingMode[r] + ' tracking mode not recognized. Exiting.');
			close;
		}
		totalVal[r][yr] = energyVal[r][yr]+capVal[r][yr]+RCBAdj[r][yr];
		discountedVal[r][yr] = totalVal[r][yr]/pow(1+hurdleRate, yr);
		OMCost[r][yr] = OMCostPerKWYear[r]*maxACOutputPower[r]/1000+OMVariableCost[r]*energy[r][yr];
		discOM[r][yr] = OMCost[r][yr]/pow(1+hurdleRate,yr);
		ppaFixedCost[r][yr] = energy[r][yr]*ppaFixed[r];
		ppaFixedCostDisc[r][yr] = ppaFixedCost[r][yr]/pow(1+hurdleRate,yr);
		ppaEscCost[r][yr] = energy[r][yr]*ppaEscStart[r]*pow(1+ppaEscalator[r],yr);
		ppaEscCostDisc[r][yr] = ppaEscCost[r][yr]/pow(1+hurdleRate,yr);
		ppaAnnCost[r][yr] = energy[r][yr]*ppaAnnual[r][yr];
		ppaAnnCostDisc[r][yr] = ppaAnnCost[r][yr]/pow(1+hurdleRate,yr);
	}
	PVB[r] = sum(discountedVal[r]);
	LCOE[r] = PVB[r]/sum(discountedEnergy[r]);
	selfBuildNPV[r] = PVB[r] - capitalCost[r] - transDistCost[r] - sum(OMCost[r]);
	ppaNPVFixed[r] = PVB[r] - sum(ppaFixedCostDisc[r]);
	ppaNPVEsc[r] = PVB[r] - sum(ppaEscCostDisc[r]);
	ppaNPVAnn[r] = PVB[r] - sum(ppaAnnCostDisc[r]);
	
}

// format output CSV
csvOut[0][0] = 'Run';
csvOut[0][1] = 1;
headers = ['Year', 'Energy(MWh)', 'Discounted Energy (MWh)', 'Energy Value ($)', 'Capacity Equivalent',
	'Capacity Value ($/kW)', 'Capacity Value ($)', 'RCB Adj ($)', 'Total Value', 'Discounted Value',
	'O&M Cost', 'Disc. O&M Cost', 'PPA Cost (Fixed)', 'Disc. PPA Cost (Fixed)', 'PPA Cost (Esc)',
	'Disc. PPA Cost (Esc)', 'PPA Cost Ann', 'Disc. PPA Cost (Ann)'];
for (i = 0; i < #headers; i++){
	csvOut[1][i] = headers[i];
}
r=0;
for (yr = 0; yr < projectLife; yr++){
	csvOut[yr+2][0] = yr;
	csvOut[yr+2][1] = energy[r][yr];
	csvOut[yr+2][2] = discountedEnergy[r][yr];
	csvOut[yr+2][3] = energyVal[r][yr];
	csvOut[yr+2][4] = capEqu[r][yr];
	csvOut[yr+2][5] = capValperKW[r][yr];
	csvOut[yr+2][6] = capVal[r][yr];
	csvOut[yr+2][7] = RCBAdj[r][yr];
	csvOut[yr+2][8] = totalVal[r][yr];
	csvOut[yr+2][9] = discountedVal[r][yr];
	csvOut[yr+2][10] = OMCost[r][yr];
	csvOut[yr+2][11] = discOM[r][yr];
	csvOut[yr+2][12] = ppaFixedCost[r][yr];
	csvOut[yr+2][13] = ppaFixedCostDisc[r][yr];
	csvOut[yr+2][14] = ppaEscCost[r][yr];
	csvOut[yr+2][15] = ppaEscCostDisc[r][yr];
	csvOut[yr+2][16] = ppaAnnCost[r][yr];
	csvOut[yr+2][17] = ppaAnnCostDisc[r][yr];	
}
csvwrite('C:/Users/dguittet/Documents/Southern Company Scripting/gen.csv', gen);
csvwrite('C:/Users/dguittet/Documents/Southern Company Scripting/output.csv', csvOut);

// *****Create HTML Output Window***** //

str = 	'<html><body>'+
		'<h3><font size = "4">Plant Comparison</font></h3>'+
		'<table bgcolor=#dddddd width=100%>'+
		'<tr><th>Plant</th>'+
		'<th>LCOE ($/MWh)</th>'+
		'<th>PVB ($)</th>'+
		'<th>Self Build NPV*</th>'+
		'<th>PPA NPV (Fixed)**</th>'+
		'<th>PPA NPV (Esc.)**</th>'+
		'<th>PPA NPV (Ann.)**</th></tr>';
trbg = '<tr bgcolor=#ffffff><td>';
for (r=0; r<nPlants; r++){
	if (mod(r,2) == 1){
		trbg = '<tr><td>';
	}
	str += trbg;
	str += r+1;
	str += '</td><td align="right">';
	str += LCOE[r];
	str += '</td><td align="right">';
	str += PVB[r];
	str += '</td><td align="right">';
	str += selfBuildNPV[r];
	str += '</td><td align="right">';
	str += ppaNPVFixed[r];
	str += '</td><td align="right">';
	str += ppaNPVEsc[r];
	str += '</td><td align="right">';
	str += ppaNPVAnn[r];
	str += '</td></tr>';
}

str += '</table>';
str += '<p align = "right">*levelized sum of cap costs plus T&D cost vs disc. value<br>';
str += '**including T&D cost<br></p></body></html>';

html_dialog(str, 'Plant Comparison', [1000,800]);