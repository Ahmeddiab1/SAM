#include <iostream>
#include <sstream>
#include <fstream>

#include <ssc/sscapi.h>

#include "export_config.h"
#include "startup_extractor.h"
#include "input_page_extractor.h"
#include "equation_extractor.h"

std::unordered_map<std::string, config_variables_info> SAM_config_to_case_variables;
std::unordered_map<std::string, std::vector<std::string>> SAM_cmod_to_inputs;

void load_ssc_variables_per_cmod(startup_extractor sue){

}

/// extract into page_variable_per_config
bool extract_scripts_to_cvi(std::string ui_path, std::string ui_form_name, config_variables_info &cvi){
    input_page_extractor ipl;
    if (!ipl.extract(ui_path + ui_form_name + ".txt")){
        std::cout << "extract_scripts_to_cvi error: Cannot open " + ui_form_name + " file at " + ui_path;
        return false;
    }

    if (SAM_ui_form_to_eqn_info.find(ui_form_name) == SAM_ui_form_to_eqn_info.end()){
        equation_extractor eqn_ext(ui_form_name);
        eqn_ext.parse_script(ipl.get_eqn_script());
        eqn_ext.export_to_equation_info();
    }

    if (SAM_ui_form_to_secondary_cmod_info.find(ui_form_name) == SAM_ui_form_to_secondary_cmod_info.end()) {
        callback_extractor cb_ext(ui_form_name, &ipl.m_env);
        cb_ext.parse_script(ipl.get_callback_script());
        cb_ext.export_to_secondary_cmod_info();
    }

    return true;
}

int main(int argc, char *argv[]){
    // startup.lk file path should be provided via command line
    const std::string& filename = "/Users/dguittet/SAM-Development/sam/deploy/runtime/startup.lk";

    if (argc < 2){
        std::cout << "startup.lk script file required.\n";
        return 1;
    }

    std::ifstream ifs(filename.c_str());
    if(!ifs.is_open()){
        std::cout << "cannot open file";
        return 1;
    }

    // load file and extract information for each technology-financial configuration
    std::string content = static_cast<std::stringstream const&>(std::stringstream() << ifs.rdbuf()).str();
    std::vector<std::string> errors;

    startup_extractor su_e;
    su_e.load_startup_script(content, &errors);

    load_ssc_variables_per_cmod(su_e);

    // for each configuration, extract the equations and callback scripts per input page
    std::string ui_path =  "../deploy/runtime/ui/";

    config_variables_info pvpc;
    extract_scripts_to_cvi(ui_path, "Solar Resource Data", pvpc);
    return 1;

    std::unordered_map<std::string, std::vector<page_info>> SAM_config_to_input_pages = su_e.get_config_to_input_pages();

    // export config_variables_info from page_info
    for (auto it = SAM_config_to_input_pages.begin(); it != SAM_config_to_input_pages.end(); ++it){
        config_variables_info cvi;
        cvi.config_name = it->first;
        std::vector<page_info> page_info_vector = it->second;

        for (size_t page_n = 0; page_n < page_info_vector.size(); page_n++){
            std::string page_name = page_info_vector[page_n].sidebar_title;

            for (size_t c = 0; c < page_info_vector[page_n].common_uiforms.size(); c++){
                std::string ui_form_name = page_info_vector[page_n].common_uiforms[c];

                if (!extract_scripts_to_cvi(ui_path, ui_form_name, cvi)){
                    return 1;
                }
            }
            for (size_t e = 0; e < page_info_vector[page_n].exclusive_uiforms.size(); e++){
                std::string ui_form_name = page_info_vector[page_n].exclusive_uiforms[e];

                std::vector<std::string> eqn_vars, cb_cmods;
                if (!extract_scripts_to_cvi(ui_path, ui_form_name, cvi)){
                    return 1;
                }
            }
        }
        SAM_config_to_case_variables.insert({cvi.config_name, cvi});
    }

    // output all data in python syntax
    std::cout << "\"\"\"\n";
    std::cout << "\tFile generated by export_config.cpp. Do not edit directly.\n";
    std::cout << "\tExports maps for:\n";
    std::cout << "\t\tconfig_to_input_pages\n";
    std::cout << "\t\tconfig_to_modules\n";
    std::cout << "\t\tconfig_to_eqn_variables\n";
    std::cout << "\t\tconfig_to_cb_cmods\n";
    std::cout << "\tSSC Version: " << ssc_version() << "\n";
    time_t now = time(0);
    std::cout << "\tDate: " << ctime(&now) <<"\n";
    std::cout << "\"\"\"\n\n";
//    su_e.print_config_to_input_pages();

    std::cout << "\n\n\n";
//    su_e.print_config_to_modules();

    std::cout << "# List of Variables that are used in equations #\n\n";
    print_ui_form_to_eqn_variable();
}

